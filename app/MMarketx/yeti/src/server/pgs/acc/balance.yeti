// Copyright 11-Jun-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting-balance page.
module server.pgs.acc.balance;

load es.dm.std;
cgi = load es.dm.cgi;
json = load es.dm.json;
load es.dm.jsonM;
sync = load es.dm.sync;
acc = load data.acc;
cts = load data.cts;
qtable = load data.qtable;
fmodel = load data.flea.fmodel;
manager = load data.manager;
diariesDb = load db.acc.diariesDb;
nicksTb = load db.nicksTb;
dailyTb = load db.dailyTb;
quotesDb = load db.quotesDb;
managersTb = load db.managersTb;

load std;

{
  /// Request process.
  ///
  /// Arguments:
  ///   ck - Comunication key.
  ///   rq - Request.
  process ck rq
  is string -> hash<string, json.t> -> string =
    case cgi.rqString rq "rq" of
    "idata" :
      var rp = [:];
      sync.run do lk:
        closes = quotesDb.closes lk;
        qs = dailyTb.read lk;
        mqs = [:];
        for qs do q:
          case nicksTb.getNick lk q.nick of
          Some nk : mqs[nk.name] := q.value;
          None () : ()
          esac
          done;
        mans = managersTb.read lk;

        var ledgers = [];
        var portfolios = [];
        for [0..cts.managers - 1] do i:
          anns = diariesDb.readAnnotations lk i;
          {ledger, portfolio} = acc.settlement anns;
          ledgers := acc.ledgerToJs ledger::ledgers;
          portfolio = map do e:
            nick = e.nick;
            var quote = -1;
            var ref = e.price;
            if nick in mqs then
              quote := mqs[nick];
              {model, params} = manager.getModel mans[i] nick;
              case qtable.nickValuesAdd closes nick quote of
              Some cs :
                refs = fmodel.refs model cs params;
                ref := head (reverse refs);
              None () :
                ()
              esac
            fi;
            { nick, stocks = e.stocks, price = e.price, quote, ref }
            done portfolio;
          portfolios := jswList acc.pfEntryToJs portfolio::portfolios;
          rp["ledgers"] := reverse ledgers |> json.wa;
          rp["portfolios"] := reverse portfolios |> json.wa
          done
        done;
      cgi.rp ck rp;
    k:
      failedKey k
    esac,
}
