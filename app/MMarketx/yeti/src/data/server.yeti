// Copyright 28-Apr-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Server data.
module data.server;

sync = load es.dm.sync;
json = load es.dm.json;
load es.dm.jsonM;
nicksTb = load db.nicksTb;

typedef confT =
  { cmd is string,
    url is string,
    /// In hisotoric "${code}" will be replaced by the company code.
    regex is string,
    /// Can be cts.serverStopped, cts.serverActive or cts.serverSelected.
    sel is number,
    isIsoDate is boolean,
    dateSeparator is string,
    isIsoNumber is boolean,
    /// In Diary are C-Q and in historic D-O-C-X-N-V
    fieldsType is string,
    /// Several hints are separated by |
    tableStart is string,
    /// Several hints are separated by |
    tableEnd is string,
    /// Several hints are separated by |
    rowStart is string,
    /// Several hints are separated by |
    rowEnd is string,
    /// Several hints are separated by |
    cellsStart is list<string>,
    /// Several hints are separated by |
    cellsEnd is list<string>
  };

typedef codeT =
  { nickId is number,
    code is option<string>
  };

typedef t =
  { id is number,
    shortName is string,
    name is string,
    dailyConf is option<confT>,
    historicConf is option<confT>,
    codes is list<codeT>
  };

(
  confToJs cf =
    json.wa
      [ json.ws cf.cmd,
        json.ws cf.url,
        json.ws cf.regex,
        json.wn cf.sel,
        json.wb cf.isIsoDate,
        json.ws cf.dateSeparator,
        json.wb cf.isIsoNumber,
        json.ws cf.fieldsType,
        json.ws cf.tableStart,
        json.ws cf.tableEnd,
        json.ws cf.rowStart,
        json.ws cf.rowEnd,
        jswList json.ws cf.cellsStart,
        jswList json.ws cf.cellsEnd
      ];

  confFromJs js =
    ( a = array (json.ra js);
      { cmd = json.rs a[0],
        url = json.rs a[1],
        regex = json.rs a[2],
        sel = json.rn a[3],
        isIsoDate = json.rb a[4],
        dateSeparator = json.rs a[5],
        isIsoNumber = json.rb a[6],
        fieldsType = json.rs a[7],
        tableStart = json.rs a[8],
        tableEnd = json.rs a[9],
        rowStart = json.rs a[10],
        rowEnd = json.rs a[11],
        cellsStart = jsrList json.rs a[12],
        cellsEnd = jsrList json.rs a[13]
       }
     );

  codeToJs c =
    json.wa
      [ json.wn c.nickId,
        case c.code of
        Some c : json.ws c;
        None () : json.wNull ()
        esac
      ];

  codeFromJs js =
    ( a = array (json.ra js);
      { nickId = json.rn a[0],
        code = if json.null? a[1] then None ()
                                  else Some (json.rs a[1])
               fi
      }
    );

{
  /// Creates a new 'server.t'.
  ///
  /// Arguments:
  ///   id - Identifier.
  ///   name - Used fro shortName and name.
  mk id name
  is number -> string -> t =
    var codes = [];
    sync.run do lk:
      codes := map do nk:
                     { nickId = nk.id,
                       code = None ()
                     }
                     done (nicksTb.nicks lk)
      done;
    { id,
      shortName = name,
      name,
      dailyConf = None (),
      historicConf = None (),
      codes
    },


  /// Serialize to JSON.
  ///
  /// Arguments:
  ///   s - Server.
  toJs s =
    json.wa
      [ json.wn s.id,
        json.ws s.shortName,
        json.ws s.name,
        case s.dailyConf of
        Some cf : confToJs cf;
        None () : json.wNull ()
        esac,
        case s.historicConf of
        Some cf : confToJs cf;
        None () : json.wNull ()
        esac,
        jswList codeToJs s.codes
      ],

  /// Restore from JSON.
  ///
  ///   Arguments:
  ///     js - JSON value.
  fromJs js =
    a = array (json.ra js);
    { id = json.rn a[0],
      shortName = json.rs a[1],
      name = json.rs a[2],
      dailyConf = if json.null? a[3] then None ()
                                     else Some (confFromJs a[3])
                                     fi,
      historicConf = if json.null? a[4] then None ()
                                        else Some (confFromJs a[4])
                                        fi,
      codes = jsrList codeFromJs a[5]
    },

})
