// Copyright 25-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[Dpath *].

#ifndef DATA_DPATH_ADPATH_H
  #define DATA_DPATH_ADPATH_H

#include "dmc/Arr.h"
#include "data/Dpath/ODpath.h"

#include "data/Dpath.h"

/// Arr[Dpath *].
struct aDpath_ADpath {
  Dpath **es; // Start elements.
  Dpath **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  Dpath **endbf; // End buffer.
};

/// Arr[Dpath *].
typedef struct aDpath_ADpath ADpath;

/// Creates a new Array with buffer size of 15 elements.
ADpath *aDpath_new (void);

/// 'buffer' must be > 0.
ADpath *aDpath_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
ADpath *aDpath_new_from (Dpath *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
ADpath *aDpath_new_c (int size, Dpath **es);

/// Returns a new array with elements of 'this'.
ADpath *aDpath_copy (ADpath *this);

///
int aDpath_size (ADpath *this);

/// Resturn the element at position ix.
Dpath *aDpath_get (ADpath *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aDpath_push (ADpath *this, Dpath *e);

/// Returns and removes the last element.
Dpath *aDpath_pop (ADpath *this);

/// Returns the las element.
Dpath *aDpath_peek (ADpath *this);

/// Sets the element at position ix.
void aDpath_set (ADpath *this, int ix, Dpath *e);

/// Inserts an element at position ix.
void aDpath_insert (ADpath *this, int ix, Dpath *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aDpath_remove (ADpath *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aDpath_cat (ADpath *this, ADpath *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aDpath_insert_arr (ADpath *this, int ix, ADpath *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aDpath_remove_range (ADpath *this, int begin, int end);

/// Removes every element of 'this'.
void aDpath_clear (ADpath *this);

/// Reverses elements of 'this'.
void aDpath_reverse (ADpath *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aDpath_sort (ADpath *this, int (*greater)(Dpath *e1, Dpath *e2));

/// aDpath_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aDpath_shuffle (ADpath *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aDpath_all (ADpath *this, int (*pred)(Dpath *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aDpath_any (ADpath *this, int (*pred)(Dpath *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aDpath_index (ADpath *this, int (*pred)(Dpath *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aDpath_last_index (ADpath *this, int (*pred)(Dpath *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
ODpath *aDpath_find(ADpath *this, int (*pred)(Dpath *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
ODpath *aDpath_find_last(ADpath *this, int (*pred)(Dpath *e));

/// aDpath_filter_in removes every element which returns '0' with 'pred'.
void aDpath_filter_in (ADpath *this, int (*pred)(Dpath *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
ADpath *aDpath_take (ADpath *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
ADpath *aDpath_takef (ADpath *this, int (*predicate)(Dpath *e));

/// Returns a new Arr with elements left after aDpath_take.
ADpath *aDpath_drop (ADpath *this, int n);

/// Returns a new Arr with elements left after aDpath_takef.
ADpath *aDpath_dropf (ADpath *this, int (*predicate)(Dpath *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
ADpath *aDpath_filter_to (ADpath *this, int (*predicate)(Dpath *e));

/// Returns a new Arr with elements generated by converter.
Arr *aDpath_map (ADpath *this, void *(*converter)(Dpath *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aDpath_map2 (ADpath *this, void *(*conv1)(Dpath *e), void *(*conv2)(Dpath *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aDpath_zip (ADpath *a1, ADpath *a2, void *(*converter)(Dpath *e1, Dpath *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aDpath_zip3 (
  ADpath *a1, ADpath *a2, ADpath *a3,
  void *(*conveter)(Dpath*e1, Dpath*e2, Dpath*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
ADpath *aDpath_duplicates (ADpath *this, int (feq)(Dpath *e1, Dpath *e2));

/// Returns this JSONized.
///   this: Container.
char *aDpath_to_js (ADpath *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
ADpath *aDpath_from_js (char *js);


//--// Not remove

#endif