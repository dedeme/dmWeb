// Copyright 08-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[IndexTree *].

#ifndef DATA_INDEXTREE_AINDEXTREE_H
  #define DATA_INDEXTREE_AINDEXTREE_H

#include "dmc/Arr.h"
#include "data/IndexTree/OIndexTree.h"

#include "data/IndexTree.h"

/// Arr[IndexTree *].
struct aIndexTree_AIndexTree {
  IndexTree **es; // Start elements.
  IndexTree **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  IndexTree **endbf; // End buffer.
};

/// Arr[IndexTree *].
typedef struct aIndexTree_AIndexTree AIndexTree;

/// Creates a new Array with buffer size of 15 elements.
AIndexTree *aIndexTree_new (void);

/// 'buffer' must be > 0.
AIndexTree *aIndexTree_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AIndexTree *aIndexTree_new_from (IndexTree *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AIndexTree *aIndexTree_new_c (int size, IndexTree **es);

/// Returns a new array with elements of 'this'.
AIndexTree *aIndexTree_copy (AIndexTree *this);

///
int aIndexTree_size (AIndexTree *this);

/// Resturn the element at position ix.
IndexTree *aIndexTree_get (AIndexTree *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aIndexTree_push (AIndexTree *this, IndexTree *e);

/// Returns and removes the last element.
IndexTree *aIndexTree_pop (AIndexTree *this);

/// Returns the las element.
IndexTree *aIndexTree_peek (AIndexTree *this);

/// Sets the element at position ix.
void aIndexTree_set (AIndexTree *this, int ix, IndexTree *e);

/// Inserts an element at position ix.
void aIndexTree_insert (AIndexTree *this, int ix, IndexTree *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aIndexTree_remove (AIndexTree *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aIndexTree_cat (AIndexTree *this, AIndexTree *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aIndexTree_insert_arr (AIndexTree *this, int ix, AIndexTree *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aIndexTree_remove_range (AIndexTree *this, int begin, int end);

/// Removes every element of 'this'.
void aIndexTree_clear (AIndexTree *this);

/// Reverses elements of 'this'.
void aIndexTree_reverse (AIndexTree *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aIndexTree_sort (AIndexTree *this, int (*greater)(IndexTree *e1, IndexTree *e2));

/// aIndexTree_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aIndexTree_shuffle (AIndexTree *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aIndexTree_all (AIndexTree *this, int (*pred)(IndexTree *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aIndexTree_any (AIndexTree *this, int (*pred)(IndexTree *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aIndexTree_index (AIndexTree *this, int (*pred)(IndexTree *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aIndexTree_last_index (AIndexTree *this, int (*pred)(IndexTree *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OIndexTree *aIndexTree_find(AIndexTree *this, int (*pred)(IndexTree *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OIndexTree *aIndexTree_find_last(AIndexTree *this, int (*pred)(IndexTree *e));

/// aIndexTree_filter_in removes every element which returns '0' with 'pred'.
void aIndexTree_filter_in (AIndexTree *this, int (*pred)(IndexTree *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AIndexTree *aIndexTree_take (AIndexTree *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AIndexTree *aIndexTree_takef (AIndexTree *this, int (*predicate)(IndexTree *e));

/// Returns a new Arr with elements left after aIndexTree_take.
AIndexTree *aIndexTree_drop (AIndexTree *this, int n);

/// Returns a new Arr with elements left after aIndexTree_takef.
AIndexTree *aIndexTree_dropf (AIndexTree *this, int (*predicate)(IndexTree *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AIndexTree *aIndexTree_filter_to (AIndexTree *this, int (*predicate)(IndexTree *e));

/// Returns a new Arr with elements generated by converter.
Arr *aIndexTree_map (AIndexTree *this, void *(*converter)(IndexTree *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aIndexTree_map2 (AIndexTree *this, void *(*conv1)(IndexTree *e), void *(*conv2)(IndexTree *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aIndexTree_zip (AIndexTree *a1, AIndexTree *a2, void *(*converter)(IndexTree *e1, IndexTree *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aIndexTree_zip3 (
  AIndexTree *a1, AIndexTree *a2, AIndexTree *a3,
  void *(*conveter)(IndexTree*e1, IndexTree*e2, IndexTree*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AIndexTree *aIndexTree_duplicates (AIndexTree *this, int (feq)(IndexTree *e1, IndexTree *e2));

/// Returns this JSONized.
///   this: Container.
///   to  : Converter of container element to JSON.
char *aIndexTree_to_js (AIndexTree *this, char *(*to)(IndexTree *e));

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
///   from: Converter from JSON to container element.
AIndexTree *aIndexTree_from_js (char *js, IndexTree *(*from)(char *ejs));


//--// Not remove

#endif