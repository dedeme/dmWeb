// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[OAOBet *].

#ifndef DATA_BET_AOAOBET_H
  #define DATA_BET_AOAOBET_H

#include "dmc/Arr.h"
#include "data/Bet/OOAOBet.h"

#include "data/Bet/OAOBet.h"

/// Arr[OAOBet *].
struct aOAOBet_AOAOBet {
  OAOBet **es; // Start elements.
  OAOBet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  OAOBet **endbf; // End buffer.
};

/// Arr[OAOBet *].
typedef struct aOAOBet_AOAOBet AOAOBet;

/// Creates a new Array with buffer size of 15 elements.
AOAOBet *aOAOBet_new (void);

/// 'buffer' must be > 0.
AOAOBet *aOAOBet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AOAOBet *aOAOBet_new_from (OAOBet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AOAOBet *aOAOBet_new_c (int size, OAOBet **es);

/// Returns a new array with elements of 'this'.
AOAOBet *aOAOBet_copy (AOAOBet *this);

///
int aOAOBet_size (AOAOBet *this);

/// Resturn the element at position ix.
OAOBet *aOAOBet_get (AOAOBet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aOAOBet_push (AOAOBet *this, OAOBet *e);

/// Returns and removes the last element.
OAOBet *aOAOBet_pop (AOAOBet *this);

/// Returns the las element.
OAOBet *aOAOBet_peek (AOAOBet *this);

/// Sets the element at position ix.
void aOAOBet_set (AOAOBet *this, int ix, OAOBet *e);

/// Inserts an element at position ix.
void aOAOBet_insert (AOAOBet *this, int ix, OAOBet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aOAOBet_remove (AOAOBet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aOAOBet_cat (AOAOBet *this, AOAOBet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aOAOBet_insert_arr (AOAOBet *this, int ix, AOAOBet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aOAOBet_remove_range (AOAOBet *this, int begin, int end);

/// Removes every element of 'this'.
void aOAOBet_clear (AOAOBet *this);

/// Reverses elements of 'this'.
void aOAOBet_reverse (AOAOBet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aOAOBet_sort (AOAOBet *this, int (*greater)(OAOBet *e1, OAOBet *e2));

/// aOAOBet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aOAOBet_shuffle (AOAOBet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aOAOBet_all (AOAOBet *this, int (*pred)(OAOBet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aOAOBet_any (AOAOBet *this, int (*pred)(OAOBet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOAOBet_index (AOAOBet *this, int (*pred)(OAOBet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOAOBet_last_index (AOAOBet *this, int (*pred)(OAOBet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OOAOBet *aOAOBet_find(AOAOBet *this, int (*pred)(OAOBet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OOAOBet *aOAOBet_find_last(AOAOBet *this, int (*pred)(OAOBet *e));

/// aOAOBet_filter_in removes every element which returns '0' with 'pred'.
void aOAOBet_filter_in (AOAOBet *this, int (*pred)(OAOBet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AOAOBet *aOAOBet_take (AOAOBet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AOAOBet *aOAOBet_takef (AOAOBet *this, int (*predicate)(OAOBet *e));

/// Returns a new Arr with elements left after aOAOBet_take.
AOAOBet *aOAOBet_drop (AOAOBet *this, int n);

/// Returns a new Arr with elements left after aOAOBet_takef.
AOAOBet *aOAOBet_dropf (AOAOBet *this, int (*predicate)(OAOBet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AOAOBet *aOAOBet_filter_to (AOAOBet *this, int (*predicate)(OAOBet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aOAOBet_map (AOAOBet *this, void *(*converter)(OAOBet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aOAOBet_map2 (AOAOBet *this, void *(*conv1)(OAOBet *e), void *(*conv2)(OAOBet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aOAOBet_zip (AOAOBet *a1, AOAOBet *a2, void *(*converter)(OAOBet *e1, OAOBet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aOAOBet_zip3 (
  AOAOBet *a1, AOAOBet *a2, AOAOBet *a3,
  void *(*conveter)(OAOBet*e1, OAOBet*e2, OAOBet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AOAOBet *aOAOBet_duplicates (AOAOBet *this, int (feq)(OAOBet *e1, OAOBet *e2));

/// Returns this JSONized.
///   this: Container.
char *aOAOBet_to_js (AOAOBet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AOAOBet *aOAOBet_from_js (char *js);


//--// Not remove

#endif