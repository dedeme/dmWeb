// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[OOOBet *].

#ifndef DATA_BET_AOOOBET_H
  #define DATA_BET_AOOOBET_H

#include "dmc/Arr.h"
#include "data/Bet/OOOOBet.h"

#include "data/Bet/OOOBet.h"

/// Arr[OOOBet *].
struct aOOOBet_AOOOBet {
  OOOBet **es; // Start elements.
  OOOBet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  OOOBet **endbf; // End buffer.
};

/// Arr[OOOBet *].
typedef struct aOOOBet_AOOOBet AOOOBet;

/// Creates a new Array with buffer size of 15 elements.
AOOOBet *aOOOBet_new (void);

/// 'buffer' must be > 0.
AOOOBet *aOOOBet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AOOOBet *aOOOBet_new_from (OOOBet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AOOOBet *aOOOBet_new_c (int size, OOOBet **es);

/// Returns a new array with elements of 'this'.
AOOOBet *aOOOBet_copy (AOOOBet *this);

///
int aOOOBet_size (AOOOBet *this);

/// Resturn the element at position ix.
OOOBet *aOOOBet_get (AOOOBet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aOOOBet_push (AOOOBet *this, OOOBet *e);

/// Returns and removes the last element.
OOOBet *aOOOBet_pop (AOOOBet *this);

/// Returns the las element.
OOOBet *aOOOBet_peek (AOOOBet *this);

/// Sets the element at position ix.
void aOOOBet_set (AOOOBet *this, int ix, OOOBet *e);

/// Inserts an element at position ix.
void aOOOBet_insert (AOOOBet *this, int ix, OOOBet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aOOOBet_remove (AOOOBet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aOOOBet_cat (AOOOBet *this, AOOOBet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aOOOBet_insert_arr (AOOOBet *this, int ix, AOOOBet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aOOOBet_remove_range (AOOOBet *this, int begin, int end);

/// Removes every element of 'this'.
void aOOOBet_clear (AOOOBet *this);

/// Reverses elements of 'this'.
void aOOOBet_reverse (AOOOBet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aOOOBet_sort (AOOOBet *this, int (*greater)(OOOBet *e1, OOOBet *e2));

/// aOOOBet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aOOOBet_shuffle (AOOOBet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aOOOBet_all (AOOOBet *this, int (*pred)(OOOBet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aOOOBet_any (AOOOBet *this, int (*pred)(OOOBet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOOOBet_index (AOOOBet *this, int (*pred)(OOOBet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOOOBet_last_index (AOOOBet *this, int (*pred)(OOOBet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OOOOBet *aOOOBet_find(AOOOBet *this, int (*pred)(OOOBet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OOOOBet *aOOOBet_find_last(AOOOBet *this, int (*pred)(OOOBet *e));

/// aOOOBet_filter_in removes every element which returns '0' with 'pred'.
void aOOOBet_filter_in (AOOOBet *this, int (*pred)(OOOBet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AOOOBet *aOOOBet_take (AOOOBet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AOOOBet *aOOOBet_takef (AOOOBet *this, int (*predicate)(OOOBet *e));

/// Returns a new Arr with elements left after aOOOBet_take.
AOOOBet *aOOOBet_drop (AOOOBet *this, int n);

/// Returns a new Arr with elements left after aOOOBet_takef.
AOOOBet *aOOOBet_dropf (AOOOBet *this, int (*predicate)(OOOBet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AOOOBet *aOOOBet_filter_to (AOOOBet *this, int (*predicate)(OOOBet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aOOOBet_map (AOOOBet *this, void *(*converter)(OOOBet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aOOOBet_map2 (AOOOBet *this, void *(*conv1)(OOOBet *e), void *(*conv2)(OOOBet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aOOOBet_zip (AOOOBet *a1, AOOOBet *a2, void *(*converter)(OOOBet *e1, OOOBet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aOOOBet_zip3 (
  AOOOBet *a1, AOOOBet *a2, AOOOBet *a3,
  void *(*conveter)(OOOBet*e1, OOOBet*e2, OOOBet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AOOOBet *aOOOBet_duplicates (AOOOBet *this, int (feq)(OOOBet *e1, OOOBet *e2));

/// Returns this JSONized.
///   this: Container.
char *aOOOBet_to_js (AOOOBet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AOOOBet *aOOOBet_from_js (char *js);


//--// Not remove

#endif