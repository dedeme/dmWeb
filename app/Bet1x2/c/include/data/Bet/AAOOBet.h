// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[AOOBet *].

#ifndef DATA_BET_AAOOBET_H
  #define DATA_BET_AAOOBET_H

#include "dmc/Arr.h"
#include "data/Bet/OAOOBet.h"

#include "data/Bet/AOOBet.h"

/// Arr[AOOBet *].
struct aAOOBet_AAOOBet {
  AOOBet **es; // Start elements.
  AOOBet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  AOOBet **endbf; // End buffer.
};

/// Arr[AOOBet *].
typedef struct aAOOBet_AAOOBet AAOOBet;

/// Creates a new Array with buffer size of 15 elements.
AAOOBet *aAOOBet_new (void);

/// 'buffer' must be > 0.
AAOOBet *aAOOBet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AAOOBet *aAOOBet_new_from (AOOBet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AAOOBet *aAOOBet_new_c (int size, AOOBet **es);

/// Returns a new array with elements of 'this'.
AAOOBet *aAOOBet_copy (AAOOBet *this);

///
int aAOOBet_size (AAOOBet *this);

/// Resturn the element at position ix.
AOOBet *aAOOBet_get (AAOOBet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aAOOBet_push (AAOOBet *this, AOOBet *e);

/// Returns and removes the last element.
AOOBet *aAOOBet_pop (AAOOBet *this);

/// Returns the las element.
AOOBet *aAOOBet_peek (AAOOBet *this);

/// Sets the element at position ix.
void aAOOBet_set (AAOOBet *this, int ix, AOOBet *e);

/// Inserts an element at position ix.
void aAOOBet_insert (AAOOBet *this, int ix, AOOBet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aAOOBet_remove (AAOOBet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aAOOBet_cat (AAOOBet *this, AAOOBet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aAOOBet_insert_arr (AAOOBet *this, int ix, AAOOBet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aAOOBet_remove_range (AAOOBet *this, int begin, int end);

/// Removes every element of 'this'.
void aAOOBet_clear (AAOOBet *this);

/// Reverses elements of 'this'.
void aAOOBet_reverse (AAOOBet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aAOOBet_sort (AAOOBet *this, int (*greater)(AOOBet *e1, AOOBet *e2));

/// aAOOBet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aAOOBet_shuffle (AAOOBet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aAOOBet_all (AAOOBet *this, int (*pred)(AOOBet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aAOOBet_any (AAOOBet *this, int (*pred)(AOOBet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAOOBet_index (AAOOBet *this, int (*pred)(AOOBet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAOOBet_last_index (AAOOBet *this, int (*pred)(AOOBet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OAOOBet *aAOOBet_find(AAOOBet *this, int (*pred)(AOOBet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OAOOBet *aAOOBet_find_last(AAOOBet *this, int (*pred)(AOOBet *e));

/// aAOOBet_filter_in removes every element which returns '0' with 'pred'.
void aAOOBet_filter_in (AAOOBet *this, int (*pred)(AOOBet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AAOOBet *aAOOBet_take (AAOOBet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AAOOBet *aAOOBet_takef (AAOOBet *this, int (*predicate)(AOOBet *e));

/// Returns a new Arr with elements left after aAOOBet_take.
AAOOBet *aAOOBet_drop (AAOOBet *this, int n);

/// Returns a new Arr with elements left after aAOOBet_takef.
AAOOBet *aAOOBet_dropf (AAOOBet *this, int (*predicate)(AOOBet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AAOOBet *aAOOBet_filter_to (AAOOBet *this, int (*predicate)(AOOBet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aAOOBet_map (AAOOBet *this, void *(*converter)(AOOBet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aAOOBet_map2 (AAOOBet *this, void *(*conv1)(AOOBet *e), void *(*conv2)(AOOBet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aAOOBet_zip (AAOOBet *a1, AAOOBet *a2, void *(*converter)(AOOBet *e1, AOOBet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aAOOBet_zip3 (
  AAOOBet *a1, AAOOBet *a2, AAOOBet *a3,
  void *(*conveter)(AOOBet*e1, AOOBet*e2, AOOBet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AAOOBet *aAOOBet_duplicates (AAOOBet *this, int (feq)(AOOBet *e1, AOOBet *e2));

/// Returns this JSONized.
///   this: Container.
char *aAOOBet_to_js (AAOOBet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AAOOBet *aAOOBet_from_js (char *js);


//--// Not remove

#endif