// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[AOBet *].

#ifndef DATA_BET_AAOBET_H
  #define DATA_BET_AAOBET_H

#include "dmc/Arr.h"
#include "data/Bet/OAOBet.h"

#include "data/Bet/AOBet.h"

/// Arr[AOBet *].
struct aAOBet_AAOBet {
  AOBet **es; // Start elements.
  AOBet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  AOBet **endbf; // End buffer.
};

/// Arr[AOBet *].
typedef struct aAOBet_AAOBet AAOBet;

/// Creates a new Array with buffer size of 15 elements.
AAOBet *aAOBet_new (void);

/// 'buffer' must be > 0.
AAOBet *aAOBet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AAOBet *aAOBet_new_from (AOBet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AAOBet *aAOBet_new_c (int size, AOBet **es);

/// Returns a new array with elements of 'this'.
AAOBet *aAOBet_copy (AAOBet *this);

///
int aAOBet_size (AAOBet *this);

/// Resturn the element at position ix.
AOBet *aAOBet_get (AAOBet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aAOBet_push (AAOBet *this, AOBet *e);

/// Returns and removes the last element.
AOBet *aAOBet_pop (AAOBet *this);

/// Returns the las element.
AOBet *aAOBet_peek (AAOBet *this);

/// Sets the element at position ix.
void aAOBet_set (AAOBet *this, int ix, AOBet *e);

/// Inserts an element at position ix.
void aAOBet_insert (AAOBet *this, int ix, AOBet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aAOBet_remove (AAOBet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aAOBet_cat (AAOBet *this, AAOBet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aAOBet_insert_arr (AAOBet *this, int ix, AAOBet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aAOBet_remove_range (AAOBet *this, int begin, int end);

/// Removes every element of 'this'.
void aAOBet_clear (AAOBet *this);

/// Reverses elements of 'this'.
void aAOBet_reverse (AAOBet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aAOBet_sort (AAOBet *this, int (*greater)(AOBet *e1, AOBet *e2));

/// aAOBet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aAOBet_shuffle (AAOBet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aAOBet_all (AAOBet *this, int (*pred)(AOBet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aAOBet_any (AAOBet *this, int (*pred)(AOBet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAOBet_index (AAOBet *this, int (*pred)(AOBet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAOBet_last_index (AAOBet *this, int (*pred)(AOBet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OAOBet *aAOBet_find(AAOBet *this, int (*pred)(AOBet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OAOBet *aAOBet_find_last(AAOBet *this, int (*pred)(AOBet *e));

/// aAOBet_filter_in removes every element which returns '0' with 'pred'.
void aAOBet_filter_in (AAOBet *this, int (*pred)(AOBet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AAOBet *aAOBet_take (AAOBet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AAOBet *aAOBet_takef (AAOBet *this, int (*predicate)(AOBet *e));

/// Returns a new Arr with elements left after aAOBet_take.
AAOBet *aAOBet_drop (AAOBet *this, int n);

/// Returns a new Arr with elements left after aAOBet_takef.
AAOBet *aAOBet_dropf (AAOBet *this, int (*predicate)(AOBet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AAOBet *aAOBet_filter_to (AAOBet *this, int (*predicate)(AOBet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aAOBet_map (AAOBet *this, void *(*converter)(AOBet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aAOBet_map2 (AAOBet *this, void *(*conv1)(AOBet *e), void *(*conv2)(AOBet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aAOBet_zip (AAOBet *a1, AAOBet *a2, void *(*converter)(AOBet *e1, AOBet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aAOBet_zip3 (
  AAOBet *a1, AAOBet *a2, AAOBet *a3,
  void *(*conveter)(AOBet*e1, AOBet*e2, AOBet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AAOBet *aAOBet_duplicates (AAOBet *this, int (feq)(AOBet *e1, AOBet *e2));

/// Returns this JSONized.
///   this: Container.
char *aAOBet_to_js (AAOBet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AAOBet *aAOBet_from_js (char *js);


//--// Not remove

/// Returns a matrix of 'cts_teams' x 'cts_teams' of 'none'.
AAOBet *aAOBet_new_nones (void);

#endif
