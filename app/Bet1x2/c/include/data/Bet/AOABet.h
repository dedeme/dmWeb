// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[OABet *].

#ifndef DATA_BET_AOABET_H
  #define DATA_BET_AOABET_H

#include "dmc/Arr.h"
#include "data/Bet/OOABet.h"

#include "data/Bet/OABet.h"

/// Arr[OABet *].
struct aOABet_AOABet {
  OABet **es; // Start elements.
  OABet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  OABet **endbf; // End buffer.
};

/// Arr[OABet *].
typedef struct aOABet_AOABet AOABet;

/// Creates a new Array with buffer size of 15 elements.
AOABet *aOABet_new (void);

/// 'buffer' must be > 0.
AOABet *aOABet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AOABet *aOABet_new_from (OABet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AOABet *aOABet_new_c (int size, OABet **es);

/// Returns a new array with elements of 'this'.
AOABet *aOABet_copy (AOABet *this);

///
int aOABet_size (AOABet *this);

/// Resturn the element at position ix.
OABet *aOABet_get (AOABet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aOABet_push (AOABet *this, OABet *e);

/// Returns and removes the last element.
OABet *aOABet_pop (AOABet *this);

/// Returns the las element.
OABet *aOABet_peek (AOABet *this);

/// Sets the element at position ix.
void aOABet_set (AOABet *this, int ix, OABet *e);

/// Inserts an element at position ix.
void aOABet_insert (AOABet *this, int ix, OABet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aOABet_remove (AOABet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aOABet_cat (AOABet *this, AOABet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aOABet_insert_arr (AOABet *this, int ix, AOABet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aOABet_remove_range (AOABet *this, int begin, int end);

/// Removes every element of 'this'.
void aOABet_clear (AOABet *this);

/// Reverses elements of 'this'.
void aOABet_reverse (AOABet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aOABet_sort (AOABet *this, int (*greater)(OABet *e1, OABet *e2));

/// aOABet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aOABet_shuffle (AOABet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aOABet_all (AOABet *this, int (*pred)(OABet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aOABet_any (AOABet *this, int (*pred)(OABet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOABet_index (AOABet *this, int (*pred)(OABet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOABet_last_index (AOABet *this, int (*pred)(OABet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OOABet *aOABet_find(AOABet *this, int (*pred)(OABet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OOABet *aOABet_find_last(AOABet *this, int (*pred)(OABet *e));

/// aOABet_filter_in removes every element which returns '0' with 'pred'.
void aOABet_filter_in (AOABet *this, int (*pred)(OABet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AOABet *aOABet_take (AOABet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AOABet *aOABet_takef (AOABet *this, int (*predicate)(OABet *e));

/// Returns a new Arr with elements left after aOABet_take.
AOABet *aOABet_drop (AOABet *this, int n);

/// Returns a new Arr with elements left after aOABet_takef.
AOABet *aOABet_dropf (AOABet *this, int (*predicate)(OABet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AOABet *aOABet_filter_to (AOABet *this, int (*predicate)(OABet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aOABet_map (AOABet *this, void *(*converter)(OABet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aOABet_map2 (AOABet *this, void *(*conv1)(OABet *e), void *(*conv2)(OABet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aOABet_zip (AOABet *a1, AOABet *a2, void *(*converter)(OABet *e1, OABet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aOABet_zip3 (
  AOABet *a1, AOABet *a2, AOABet *a3,
  void *(*conveter)(OABet*e1, OABet*e2, OABet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AOABet *aOABet_duplicates (AOABet *this, int (feq)(OABet *e1, OABet *e2));

/// Returns this JSONized.
///   this: Container.
char *aOABet_to_js (AOABet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AOABet *aOABet_from_js (char *js);


//--// Not remove

#endif