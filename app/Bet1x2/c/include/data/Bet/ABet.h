// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[Bet *].

#ifndef DATA_BET_ABET_H
  #define DATA_BET_ABET_H

#include "dmc/Arr.h"
#include "data/Bet/OBet.h"

#include "data/Bet.h"

/// Arr[Bet *].
struct aBet_ABet {
  Bet **es; // Start elements.
  Bet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  Bet **endbf; // End buffer.
};

/// Arr[Bet *].
typedef struct aBet_ABet ABet;

/// Creates a new Array with buffer size of 15 elements.
ABet *aBet_new (void);

/// 'buffer' must be > 0.
ABet *aBet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
ABet *aBet_new_from (Bet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
ABet *aBet_new_c (int size, Bet **es);

/// Returns a new array with elements of 'this'.
ABet *aBet_copy (ABet *this);

///
int aBet_size (ABet *this);

/// Resturn the element at position ix.
Bet *aBet_get (ABet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aBet_push (ABet *this, Bet *e);

/// Returns and removes the last element.
Bet *aBet_pop (ABet *this);

/// Returns the las element.
Bet *aBet_peek (ABet *this);

/// Sets the element at position ix.
void aBet_set (ABet *this, int ix, Bet *e);

/// Inserts an element at position ix.
void aBet_insert (ABet *this, int ix, Bet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aBet_remove (ABet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aBet_cat (ABet *this, ABet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aBet_insert_arr (ABet *this, int ix, ABet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aBet_remove_range (ABet *this, int begin, int end);

/// Removes every element of 'this'.
void aBet_clear (ABet *this);

/// Reverses elements of 'this'.
void aBet_reverse (ABet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aBet_sort (ABet *this, int (*greater)(Bet *e1, Bet *e2));

/// aBet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aBet_shuffle (ABet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aBet_all (ABet *this, int (*pred)(Bet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aBet_any (ABet *this, int (*pred)(Bet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aBet_index (ABet *this, int (*pred)(Bet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aBet_last_index (ABet *this, int (*pred)(Bet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OBet *aBet_find(ABet *this, int (*pred)(Bet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OBet *aBet_find_last(ABet *this, int (*pred)(Bet *e));

/// aBet_filter_in removes every element which returns '0' with 'pred'.
void aBet_filter_in (ABet *this, int (*pred)(Bet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
ABet *aBet_take (ABet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
ABet *aBet_takef (ABet *this, int (*predicate)(Bet *e));

/// Returns a new Arr with elements left after aBet_take.
ABet *aBet_drop (ABet *this, int n);

/// Returns a new Arr with elements left after aBet_takef.
ABet *aBet_dropf (ABet *this, int (*predicate)(Bet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
ABet *aBet_filter_to (ABet *this, int (*predicate)(Bet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aBet_map (ABet *this, void *(*converter)(Bet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aBet_map2 (ABet *this, void *(*conv1)(Bet *e), void *(*conv2)(Bet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aBet_zip (ABet *a1, ABet *a2, void *(*converter)(Bet *e1, Bet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aBet_zip3 (
  ABet *a1, ABet *a2, ABet *a3,
  void *(*conveter)(Bet*e1, Bet*e2, Bet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
ABet *aBet_duplicates (ABet *this, int (feq)(Bet *e1, Bet *e2));

/// Returns this JSONized.
///   this: Container.
char *aBet_to_js (ABet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
ABet *aBet_from_js (char *js);


//--// Not remove

#endif