// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[AAOBet *].

#ifndef DATA_BET_AAAOBET_H
  #define DATA_BET_AAAOBET_H

#include "dmc/Arr.h"
#include "data/Bet/OAAOBet.h"

#include "data/Bet/AAOBet.h"

/// Arr[AAOBet *].
struct aAAOBet_AAAOBet {
  AAOBet **es; // Start elements.
  AAOBet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  AAOBet **endbf; // End buffer.
};

/// Arr[AAOBet *].
typedef struct aAAOBet_AAAOBet AAAOBet;

/// Creates a new Array with buffer size of 15 elements.
AAAOBet *aAAOBet_new (void);

/// 'buffer' must be > 0.
AAAOBet *aAAOBet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AAAOBet *aAAOBet_new_from (AAOBet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AAAOBet *aAAOBet_new_c (int size, AAOBet **es);

/// Returns a new array with elements of 'this'.
AAAOBet *aAAOBet_copy (AAAOBet *this);

///
int aAAOBet_size (AAAOBet *this);

/// Resturn the element at position ix.
AAOBet *aAAOBet_get (AAAOBet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aAAOBet_push (AAAOBet *this, AAOBet *e);

/// Returns and removes the last element.
AAOBet *aAAOBet_pop (AAAOBet *this);

/// Returns the las element.
AAOBet *aAAOBet_peek (AAAOBet *this);

/// Sets the element at position ix.
void aAAOBet_set (AAAOBet *this, int ix, AAOBet *e);

/// Inserts an element at position ix.
void aAAOBet_insert (AAAOBet *this, int ix, AAOBet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aAAOBet_remove (AAAOBet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aAAOBet_cat (AAAOBet *this, AAAOBet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aAAOBet_insert_arr (AAAOBet *this, int ix, AAAOBet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aAAOBet_remove_range (AAAOBet *this, int begin, int end);

/// Removes every element of 'this'.
void aAAOBet_clear (AAAOBet *this);

/// Reverses elements of 'this'.
void aAAOBet_reverse (AAAOBet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aAAOBet_sort (AAAOBet *this, int (*greater)(AAOBet *e1, AAOBet *e2));

/// aAAOBet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aAAOBet_shuffle (AAAOBet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aAAOBet_all (AAAOBet *this, int (*pred)(AAOBet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aAAOBet_any (AAAOBet *this, int (*pred)(AAOBet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAAOBet_index (AAAOBet *this, int (*pred)(AAOBet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAAOBet_last_index (AAAOBet *this, int (*pred)(AAOBet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OAAOBet *aAAOBet_find(AAAOBet *this, int (*pred)(AAOBet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OAAOBet *aAAOBet_find_last(AAAOBet *this, int (*pred)(AAOBet *e));

/// aAAOBet_filter_in removes every element which returns '0' with 'pred'.
void aAAOBet_filter_in (AAAOBet *this, int (*pred)(AAOBet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AAAOBet *aAAOBet_take (AAAOBet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AAAOBet *aAAOBet_takef (AAAOBet *this, int (*predicate)(AAOBet *e));

/// Returns a new Arr with elements left after aAAOBet_take.
AAAOBet *aAAOBet_drop (AAAOBet *this, int n);

/// Returns a new Arr with elements left after aAAOBet_takef.
AAAOBet *aAAOBet_dropf (AAAOBet *this, int (*predicate)(AAOBet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AAAOBet *aAAOBet_filter_to (AAAOBet *this, int (*predicate)(AAOBet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aAAOBet_map (AAAOBet *this, void *(*converter)(AAOBet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aAAOBet_map2 (AAAOBet *this, void *(*conv1)(AAOBet *e), void *(*conv2)(AAOBet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aAAOBet_zip (AAAOBet *a1, AAAOBet *a2, void *(*converter)(AAOBet *e1, AAOBet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aAAOBet_zip3 (
  AAAOBet *a1, AAAOBet *a2, AAAOBet *a3,
  void *(*conveter)(AAOBet*e1, AAOBet*e2, AAOBet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AAAOBet *aAAOBet_duplicates (AAAOBet *this, int (feq)(AAOBet *e1, AAOBet *e2));

/// Returns this JSONized.
///   this: Container.
char *aAAOBet_to_js (AAAOBet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AAAOBet *aAAOBet_from_js (char *js);


//--// Not remove

#endif