// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[AABet *].

#ifndef DATA_BET_AAABET_H
  #define DATA_BET_AAABET_H

#include "dmc/Arr.h"
#include "data/Bet/OAABet.h"

#include "data/Bet/AABet.h"

/// Arr[AABet *].
struct aAABet_AAABet {
  AABet **es; // Start elements.
  AABet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  AABet **endbf; // End buffer.
};

/// Arr[AABet *].
typedef struct aAABet_AAABet AAABet;

/// Creates a new Array with buffer size of 15 elements.
AAABet *aAABet_new (void);

/// 'buffer' must be > 0.
AAABet *aAABet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AAABet *aAABet_new_from (AABet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AAABet *aAABet_new_c (int size, AABet **es);

/// Returns a new array with elements of 'this'.
AAABet *aAABet_copy (AAABet *this);

///
int aAABet_size (AAABet *this);

/// Resturn the element at position ix.
AABet *aAABet_get (AAABet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aAABet_push (AAABet *this, AABet *e);

/// Returns and removes the last element.
AABet *aAABet_pop (AAABet *this);

/// Returns the las element.
AABet *aAABet_peek (AAABet *this);

/// Sets the element at position ix.
void aAABet_set (AAABet *this, int ix, AABet *e);

/// Inserts an element at position ix.
void aAABet_insert (AAABet *this, int ix, AABet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aAABet_remove (AAABet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aAABet_cat (AAABet *this, AAABet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aAABet_insert_arr (AAABet *this, int ix, AAABet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aAABet_remove_range (AAABet *this, int begin, int end);

/// Removes every element of 'this'.
void aAABet_clear (AAABet *this);

/// Reverses elements of 'this'.
void aAABet_reverse (AAABet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aAABet_sort (AAABet *this, int (*greater)(AABet *e1, AABet *e2));

/// aAABet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aAABet_shuffle (AAABet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aAABet_all (AAABet *this, int (*pred)(AABet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aAABet_any (AAABet *this, int (*pred)(AABet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAABet_index (AAABet *this, int (*pred)(AABet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAABet_last_index (AAABet *this, int (*pred)(AABet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OAABet *aAABet_find(AAABet *this, int (*pred)(AABet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OAABet *aAABet_find_last(AAABet *this, int (*pred)(AABet *e));

/// aAABet_filter_in removes every element which returns '0' with 'pred'.
void aAABet_filter_in (AAABet *this, int (*pred)(AABet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AAABet *aAABet_take (AAABet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AAABet *aAABet_takef (AAABet *this, int (*predicate)(AABet *e));

/// Returns a new Arr with elements left after aAABet_take.
AAABet *aAABet_drop (AAABet *this, int n);

/// Returns a new Arr with elements left after aAABet_takef.
AAABet *aAABet_dropf (AAABet *this, int (*predicate)(AABet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AAABet *aAABet_filter_to (AAABet *this, int (*predicate)(AABet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aAABet_map (AAABet *this, void *(*converter)(AABet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aAABet_map2 (AAABet *this, void *(*conv1)(AABet *e), void *(*conv2)(AABet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aAABet_zip (AAABet *a1, AAABet *a2, void *(*converter)(AABet *e1, AABet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aAABet_zip3 (
  AAABet *a1, AAABet *a2, AAABet *a3,
  void *(*conveter)(AABet*e1, AABet*e2, AABet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AAABet *aAABet_duplicates (AAABet *this, int (feq)(AABet *e1, AABet *e2));

/// Returns this JSONized.
///   this: Container.
char *aAABet_to_js (AAABet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AAABet *aAABet_from_js (char *js);


//--// Not remove

#endif