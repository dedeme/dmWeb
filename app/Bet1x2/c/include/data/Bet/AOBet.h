// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[OBet *].

#ifndef DATA_BET_AOBET_H
  #define DATA_BET_AOBET_H

#include "dmc/Arr.h"
#include "data/Bet/OOBet.h"

#include "data/Bet/OBet.h"

/// Arr[OBet *].
struct aOBet_AOBet {
  OBet **es; // Start elements.
  OBet **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  OBet **endbf; // End buffer.
};

/// Arr[OBet *].
typedef struct aOBet_AOBet AOBet;

/// Creates a new Array with buffer size of 15 elements.
AOBet *aOBet_new (void);

/// 'buffer' must be > 0.
AOBet *aOBet_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AOBet *aOBet_new_from (OBet *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AOBet *aOBet_new_c (int size, OBet **es);

/// Returns a new array with elements of 'this'.
AOBet *aOBet_copy (AOBet *this);

///
int aOBet_size (AOBet *this);

/// Resturn the element at position ix.
OBet *aOBet_get (AOBet *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aOBet_push (AOBet *this, OBet *e);

/// Returns and removes the last element.
OBet *aOBet_pop (AOBet *this);

/// Returns the las element.
OBet *aOBet_peek (AOBet *this);

/// Sets the element at position ix.
void aOBet_set (AOBet *this, int ix, OBet *e);

/// Inserts an element at position ix.
void aOBet_insert (AOBet *this, int ix, OBet *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aOBet_remove (AOBet *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aOBet_cat (AOBet *this, AOBet *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aOBet_insert_arr (AOBet *this, int ix, AOBet *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aOBet_remove_range (AOBet *this, int begin, int end);

/// Removes every element of 'this'.
void aOBet_clear (AOBet *this);

/// Reverses elements of 'this'.
void aOBet_reverse (AOBet *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aOBet_sort (AOBet *this, int (*greater)(OBet *e1, OBet *e2));

/// aOBet_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aOBet_shuffle (AOBet *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aOBet_all (AOBet *this, int (*pred)(OBet *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aOBet_any (AOBet *this, int (*pred)(OBet *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOBet_index (AOBet *this, int (*pred)(OBet *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOBet_last_index (AOBet *this, int (*pred)(OBet *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OOBet *aOBet_find(AOBet *this, int (*pred)(OBet *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OOBet *aOBet_find_last(AOBet *this, int (*pred)(OBet *e));

/// aOBet_filter_in removes every element which returns '0' with 'pred'.
void aOBet_filter_in (AOBet *this, int (*pred)(OBet *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AOBet *aOBet_take (AOBet *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AOBet *aOBet_takef (AOBet *this, int (*predicate)(OBet *e));

/// Returns a new Arr with elements left after aOBet_take.
AOBet *aOBet_drop (AOBet *this, int n);

/// Returns a new Arr with elements left after aOBet_takef.
AOBet *aOBet_dropf (AOBet *this, int (*predicate)(OBet *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AOBet *aOBet_filter_to (AOBet *this, int (*predicate)(OBet *e));

/// Returns a new Arr with elements generated by converter.
Arr *aOBet_map (AOBet *this, void *(*converter)(OBet *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aOBet_map2 (AOBet *this, void *(*conv1)(OBet *e), void *(*conv2)(OBet *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aOBet_zip (AOBet *a1, AOBet *a2, void *(*converter)(OBet *e1, OBet *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aOBet_zip3 (
  AOBet *a1, AOBet *a2, AOBet *a3,
  void *(*conveter)(OBet*e1, OBet*e2, OBet*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AOBet *aOBet_duplicates (AOBet *this, int (feq)(OBet *e1, OBet *e2));

/// Returns this JSONized.
///   this: Container.
char *aOBet_to_js (AOBet *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AOBet *aOBet_from_js (char *js);


//--// Not remove

/// Returns a matrix of 'cts_teams' of 'none'.
AOBet *aOBet_new_nones (void);

#endif
