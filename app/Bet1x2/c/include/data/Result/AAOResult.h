// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[AOResult *].

#ifndef DATA_RESULT_AAORESULT_H
  #define DATA_RESULT_AAORESULT_H

#include "dmc/Arr.h"
#include "data/Result/OAOResult.h"

#include "data/Result/AOResult.h"

/// Arr[AOResult *].
struct aAOResult_AAOResult {
  AOResult **es; // Start elements.
  AOResult **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  AOResult **endbf; // End buffer.
};

/// Arr[AOResult *].
typedef struct aAOResult_AAOResult AAOResult;

/// Creates a new Array with buffer size of 15 elements.
AAOResult *aAOResult_new (void);

/// 'buffer' must be > 0.
AAOResult *aAOResult_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AAOResult *aAOResult_new_from (AOResult *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AAOResult *aAOResult_new_c (int size, AOResult **es);

/// Returns a new array with elements of 'this'.
AAOResult *aAOResult_copy (AAOResult *this);

///
int aAOResult_size (AAOResult *this);

/// Resturn the element at position ix.
AOResult *aAOResult_get (AAOResult *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aAOResult_push (AAOResult *this, AOResult *e);

/// Returns and removes the last element.
AOResult *aAOResult_pop (AAOResult *this);

/// Returns the las element.
AOResult *aAOResult_peek (AAOResult *this);

/// Sets the element at position ix.
void aAOResult_set (AAOResult *this, int ix, AOResult *e);

/// Inserts an element at position ix.
void aAOResult_insert (AAOResult *this, int ix, AOResult *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aAOResult_remove (AAOResult *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aAOResult_cat (AAOResult *this, AAOResult *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aAOResult_insert_arr (AAOResult *this, int ix, AAOResult *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aAOResult_remove_range (AAOResult *this, int begin, int end);

/// Removes every element of 'this'.
void aAOResult_clear (AAOResult *this);

/// Reverses elements of 'this'.
void aAOResult_reverse (AAOResult *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aAOResult_sort (AAOResult *this, int (*greater)(AOResult *e1, AOResult *e2));

/// aAOResult_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aAOResult_shuffle (AAOResult *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aAOResult_all (AAOResult *this, int (*pred)(AOResult *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aAOResult_any (AAOResult *this, int (*pred)(AOResult *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAOResult_index (AAOResult *this, int (*pred)(AOResult *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAOResult_last_index (AAOResult *this, int (*pred)(AOResult *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OAOResult *aAOResult_find(AAOResult *this, int (*pred)(AOResult *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OAOResult *aAOResult_find_last(AAOResult *this, int (*pred)(AOResult *e));

/// aAOResult_filter_in removes every element which returns '0' with 'pred'.
void aAOResult_filter_in (AAOResult *this, int (*pred)(AOResult *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AAOResult *aAOResult_take (AAOResult *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AAOResult *aAOResult_takef (AAOResult *this, int (*predicate)(AOResult *e));

/// Returns a new Arr with elements left after aAOResult_take.
AAOResult *aAOResult_drop (AAOResult *this, int n);

/// Returns a new Arr with elements left after aAOResult_takef.
AAOResult *aAOResult_dropf (AAOResult *this, int (*predicate)(AOResult *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AAOResult *aAOResult_filter_to (AAOResult *this, int (*predicate)(AOResult *e));

/// Returns a new Arr with elements generated by converter.
Arr *aAOResult_map (AAOResult *this, void *(*converter)(AOResult *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aAOResult_map2 (AAOResult *this, void *(*conv1)(AOResult *e), void *(*conv2)(AOResult *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aAOResult_zip (AAOResult *a1, AAOResult *a2, void *(*converter)(AOResult *e1, AOResult *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aAOResult_zip3 (
  AAOResult *a1, AAOResult *a2, AAOResult *a3,
  void *(*conveter)(AOResult*e1, AOResult*e2, AOResult*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AAOResult *aAOResult_duplicates (AAOResult *this, int (feq)(AOResult *e1, AOResult *e2));

/// Returns this JSONized.
///   this: Container.
char *aAOResult_to_js (AAOResult *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AAOResult *aAOResult_from_js (char *js);


//--// Not remove

/// Returns a matrix of 'cts_teams' x 'cts_teams' of 'none'.
AAOResult *aAOResult_new_nones (void);

#endif
