// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[OOResult *].

#ifndef DATA_RESULT_AOORESULT_H
  #define DATA_RESULT_AOORESULT_H

#include "dmc/Arr.h"
#include "data/Result/OOOResult.h"

#include "data/Result/OOResult.h"

/// Arr[OOResult *].
struct aOOResult_AOOResult {
  OOResult **es; // Start elements.
  OOResult **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  OOResult **endbf; // End buffer.
};

/// Arr[OOResult *].
typedef struct aOOResult_AOOResult AOOResult;

/// Creates a new Array with buffer size of 15 elements.
AOOResult *aOOResult_new (void);

/// 'buffer' must be > 0.
AOOResult *aOOResult_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AOOResult *aOOResult_new_from (OOResult *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AOOResult *aOOResult_new_c (int size, OOResult **es);

/// Returns a new array with elements of 'this'.
AOOResult *aOOResult_copy (AOOResult *this);

///
int aOOResult_size (AOOResult *this);

/// Resturn the element at position ix.
OOResult *aOOResult_get (AOOResult *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aOOResult_push (AOOResult *this, OOResult *e);

/// Returns and removes the last element.
OOResult *aOOResult_pop (AOOResult *this);

/// Returns the las element.
OOResult *aOOResult_peek (AOOResult *this);

/// Sets the element at position ix.
void aOOResult_set (AOOResult *this, int ix, OOResult *e);

/// Inserts an element at position ix.
void aOOResult_insert (AOOResult *this, int ix, OOResult *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aOOResult_remove (AOOResult *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aOOResult_cat (AOOResult *this, AOOResult *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aOOResult_insert_arr (AOOResult *this, int ix, AOOResult *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aOOResult_remove_range (AOOResult *this, int begin, int end);

/// Removes every element of 'this'.
void aOOResult_clear (AOOResult *this);

/// Reverses elements of 'this'.
void aOOResult_reverse (AOOResult *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aOOResult_sort (AOOResult *this, int (*greater)(OOResult *e1, OOResult *e2));

/// aOOResult_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aOOResult_shuffle (AOOResult *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aOOResult_all (AOOResult *this, int (*pred)(OOResult *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aOOResult_any (AOOResult *this, int (*pred)(OOResult *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOOResult_index (AOOResult *this, int (*pred)(OOResult *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOOResult_last_index (AOOResult *this, int (*pred)(OOResult *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OOOResult *aOOResult_find(AOOResult *this, int (*pred)(OOResult *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OOOResult *aOOResult_find_last(AOOResult *this, int (*pred)(OOResult *e));

/// aOOResult_filter_in removes every element which returns '0' with 'pred'.
void aOOResult_filter_in (AOOResult *this, int (*pred)(OOResult *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AOOResult *aOOResult_take (AOOResult *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AOOResult *aOOResult_takef (AOOResult *this, int (*predicate)(OOResult *e));

/// Returns a new Arr with elements left after aOOResult_take.
AOOResult *aOOResult_drop (AOOResult *this, int n);

/// Returns a new Arr with elements left after aOOResult_takef.
AOOResult *aOOResult_dropf (AOOResult *this, int (*predicate)(OOResult *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AOOResult *aOOResult_filter_to (AOOResult *this, int (*predicate)(OOResult *e));

/// Returns a new Arr with elements generated by converter.
Arr *aOOResult_map (AOOResult *this, void *(*converter)(OOResult *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aOOResult_map2 (AOOResult *this, void *(*conv1)(OOResult *e), void *(*conv2)(OOResult *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aOOResult_zip (AOOResult *a1, AOOResult *a2, void *(*converter)(OOResult *e1, OOResult *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aOOResult_zip3 (
  AOOResult *a1, AOOResult *a2, AOOResult *a3,
  void *(*conveter)(OOResult*e1, OOResult*e2, OOResult*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AOOResult *aOOResult_duplicates (AOOResult *this, int (feq)(OOResult *e1, OOResult *e2));

/// Returns this JSONized.
///   this: Container.
char *aOOResult_to_js (AOOResult *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AOOResult *aOOResult_from_js (char *js);


//--// Not remove

#endif