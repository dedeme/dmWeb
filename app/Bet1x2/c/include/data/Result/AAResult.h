// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[AResult *].

#ifndef DATA_RESULT_AARESULT_H
  #define DATA_RESULT_AARESULT_H

#include "dmc/Arr.h"
#include "data/Result/OAResult.h"

#include "data/Result/AResult.h"

/// Arr[AResult *].
struct aAResult_AAResult {
  AResult **es; // Start elements.
  AResult **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  AResult **endbf; // End buffer.
};

/// Arr[AResult *].
typedef struct aAResult_AAResult AAResult;

/// Creates a new Array with buffer size of 15 elements.
AAResult *aAResult_new (void);

/// 'buffer' must be > 0.
AAResult *aAResult_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AAResult *aAResult_new_from (AResult *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AAResult *aAResult_new_c (int size, AResult **es);

/// Returns a new array with elements of 'this'.
AAResult *aAResult_copy (AAResult *this);

///
int aAResult_size (AAResult *this);

/// Resturn the element at position ix.
AResult *aAResult_get (AAResult *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aAResult_push (AAResult *this, AResult *e);

/// Returns and removes the last element.
AResult *aAResult_pop (AAResult *this);

/// Returns the las element.
AResult *aAResult_peek (AAResult *this);

/// Sets the element at position ix.
void aAResult_set (AAResult *this, int ix, AResult *e);

/// Inserts an element at position ix.
void aAResult_insert (AAResult *this, int ix, AResult *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aAResult_remove (AAResult *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aAResult_cat (AAResult *this, AAResult *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aAResult_insert_arr (AAResult *this, int ix, AAResult *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aAResult_remove_range (AAResult *this, int begin, int end);

/// Removes every element of 'this'.
void aAResult_clear (AAResult *this);

/// Reverses elements of 'this'.
void aAResult_reverse (AAResult *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aAResult_sort (AAResult *this, int (*greater)(AResult *e1, AResult *e2));

/// aAResult_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aAResult_shuffle (AAResult *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aAResult_all (AAResult *this, int (*pred)(AResult *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aAResult_any (AAResult *this, int (*pred)(AResult *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAResult_index (AAResult *this, int (*pred)(AResult *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAResult_last_index (AAResult *this, int (*pred)(AResult *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OAResult *aAResult_find(AAResult *this, int (*pred)(AResult *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OAResult *aAResult_find_last(AAResult *this, int (*pred)(AResult *e));

/// aAResult_filter_in removes every element which returns '0' with 'pred'.
void aAResult_filter_in (AAResult *this, int (*pred)(AResult *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AAResult *aAResult_take (AAResult *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AAResult *aAResult_takef (AAResult *this, int (*predicate)(AResult *e));

/// Returns a new Arr with elements left after aAResult_take.
AAResult *aAResult_drop (AAResult *this, int n);

/// Returns a new Arr with elements left after aAResult_takef.
AAResult *aAResult_dropf (AAResult *this, int (*predicate)(AResult *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AAResult *aAResult_filter_to (AAResult *this, int (*predicate)(AResult *e));

/// Returns a new Arr with elements generated by converter.
Arr *aAResult_map (AAResult *this, void *(*converter)(AResult *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aAResult_map2 (AAResult *this, void *(*conv1)(AResult *e), void *(*conv2)(AResult *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aAResult_zip (AAResult *a1, AAResult *a2, void *(*converter)(AResult *e1, AResult *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aAResult_zip3 (
  AAResult *a1, AAResult *a2, AAResult *a3,
  void *(*conveter)(AResult*e1, AResult*e2, AResult*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AAResult *aAResult_duplicates (AAResult *this, int (feq)(AResult *e1, AResult *e2));

/// Returns this JSONized.
///   this: Container.
char *aAResult_to_js (AAResult *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AAResult *aAResult_from_js (char *js);


//--// Not remove

#endif