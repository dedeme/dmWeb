// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[Result *].

#ifndef DATA_RESULT_ARESULT_H
  #define DATA_RESULT_ARESULT_H

#include "dmc/Arr.h"
#include "data/Result/OResult.h"

#include "data/Result.h"

/// Arr[Result *].
struct aResult_AResult {
  Result **es; // Start elements.
  Result **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  Result **endbf; // End buffer.
};

/// Arr[Result *].
typedef struct aResult_AResult AResult;

/// Creates a new Array with buffer size of 15 elements.
AResult *aResult_new (void);

/// 'buffer' must be > 0.
AResult *aResult_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AResult *aResult_new_from (Result *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AResult *aResult_new_c (int size, Result **es);

/// Returns a new array with elements of 'this'.
AResult *aResult_copy (AResult *this);

///
int aResult_size (AResult *this);

/// Resturn the element at position ix.
Result *aResult_get (AResult *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aResult_push (AResult *this, Result *e);

/// Returns and removes the last element.
Result *aResult_pop (AResult *this);

/// Returns the las element.
Result *aResult_peek (AResult *this);

/// Sets the element at position ix.
void aResult_set (AResult *this, int ix, Result *e);

/// Inserts an element at position ix.
void aResult_insert (AResult *this, int ix, Result *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aResult_remove (AResult *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aResult_cat (AResult *this, AResult *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aResult_insert_arr (AResult *this, int ix, AResult *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aResult_remove_range (AResult *this, int begin, int end);

/// Removes every element of 'this'.
void aResult_clear (AResult *this);

/// Reverses elements of 'this'.
void aResult_reverse (AResult *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aResult_sort (AResult *this, int (*greater)(Result *e1, Result *e2));

/// aResult_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aResult_shuffle (AResult *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aResult_all (AResult *this, int (*pred)(Result *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aResult_any (AResult *this, int (*pred)(Result *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aResult_index (AResult *this, int (*pred)(Result *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aResult_last_index (AResult *this, int (*pred)(Result *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OResult *aResult_find(AResult *this, int (*pred)(Result *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OResult *aResult_find_last(AResult *this, int (*pred)(Result *e));

/// aResult_filter_in removes every element which returns '0' with 'pred'.
void aResult_filter_in (AResult *this, int (*pred)(Result *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AResult *aResult_take (AResult *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AResult *aResult_takef (AResult *this, int (*predicate)(Result *e));

/// Returns a new Arr with elements left after aResult_take.
AResult *aResult_drop (AResult *this, int n);

/// Returns a new Arr with elements left after aResult_takef.
AResult *aResult_dropf (AResult *this, int (*predicate)(Result *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AResult *aResult_filter_to (AResult *this, int (*predicate)(Result *e));

/// Returns a new Arr with elements generated by converter.
Arr *aResult_map (AResult *this, void *(*converter)(Result *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aResult_map2 (AResult *this, void *(*conv1)(Result *e), void *(*conv2)(Result *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aResult_zip (AResult *a1, AResult *a2, void *(*converter)(Result *e1, Result *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aResult_zip3 (
  AResult *a1, AResult *a2, AResult *a3,
  void *(*conveter)(Result*e1, Result*e2, Result*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AResult *aResult_duplicates (AResult *this, int (feq)(Result *e1, Result *e2));

/// Returns this JSONized.
///   this: Container.
char *aResult_to_js (AResult *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AResult *aResult_from_js (char *js);


//--// Not remove

#endif