// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[AAResult *].

#ifndef DATA_RESULT_AAARESULT_H
  #define DATA_RESULT_AAARESULT_H

#include "dmc/Arr.h"
#include "data/Result/OAAResult.h"

#include "data/Result/AAResult.h"

/// Arr[AAResult *].
struct aAAResult_AAAResult {
  AAResult **es; // Start elements.
  AAResult **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  AAResult **endbf; // End buffer.
};

/// Arr[AAResult *].
typedef struct aAAResult_AAAResult AAAResult;

/// Creates a new Array with buffer size of 15 elements.
AAAResult *aAAResult_new (void);

/// 'buffer' must be > 0.
AAAResult *aAAResult_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AAAResult *aAAResult_new_from (AAResult *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AAAResult *aAAResult_new_c (int size, AAResult **es);

/// Returns a new array with elements of 'this'.
AAAResult *aAAResult_copy (AAAResult *this);

///
int aAAResult_size (AAAResult *this);

/// Resturn the element at position ix.
AAResult *aAAResult_get (AAAResult *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aAAResult_push (AAAResult *this, AAResult *e);

/// Returns and removes the last element.
AAResult *aAAResult_pop (AAAResult *this);

/// Returns the las element.
AAResult *aAAResult_peek (AAAResult *this);

/// Sets the element at position ix.
void aAAResult_set (AAAResult *this, int ix, AAResult *e);

/// Inserts an element at position ix.
void aAAResult_insert (AAAResult *this, int ix, AAResult *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aAAResult_remove (AAAResult *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aAAResult_cat (AAAResult *this, AAAResult *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aAAResult_insert_arr (AAAResult *this, int ix, AAAResult *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aAAResult_remove_range (AAAResult *this, int begin, int end);

/// Removes every element of 'this'.
void aAAResult_clear (AAAResult *this);

/// Reverses elements of 'this'.
void aAAResult_reverse (AAAResult *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aAAResult_sort (AAAResult *this, int (*greater)(AAResult *e1, AAResult *e2));

/// aAAResult_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aAAResult_shuffle (AAAResult *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aAAResult_all (AAAResult *this, int (*pred)(AAResult *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aAAResult_any (AAAResult *this, int (*pred)(AAResult *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAAResult_index (AAAResult *this, int (*pred)(AAResult *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAAResult_last_index (AAAResult *this, int (*pred)(AAResult *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OAAResult *aAAResult_find(AAAResult *this, int (*pred)(AAResult *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OAAResult *aAAResult_find_last(AAAResult *this, int (*pred)(AAResult *e));

/// aAAResult_filter_in removes every element which returns '0' with 'pred'.
void aAAResult_filter_in (AAAResult *this, int (*pred)(AAResult *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AAAResult *aAAResult_take (AAAResult *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AAAResult *aAAResult_takef (AAAResult *this, int (*predicate)(AAResult *e));

/// Returns a new Arr with elements left after aAAResult_take.
AAAResult *aAAResult_drop (AAAResult *this, int n);

/// Returns a new Arr with elements left after aAAResult_takef.
AAAResult *aAAResult_dropf (AAAResult *this, int (*predicate)(AAResult *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AAAResult *aAAResult_filter_to (AAAResult *this, int (*predicate)(AAResult *e));

/// Returns a new Arr with elements generated by converter.
Arr *aAAResult_map (AAAResult *this, void *(*converter)(AAResult *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aAAResult_map2 (AAAResult *this, void *(*conv1)(AAResult *e), void *(*conv2)(AAResult *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aAAResult_zip (AAAResult *a1, AAAResult *a2, void *(*converter)(AAResult *e1, AAResult *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aAAResult_zip3 (
  AAAResult *a1, AAAResult *a2, AAAResult *a3,
  void *(*conveter)(AAResult*e1, AAResult*e2, AAResult*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AAAResult *aAAResult_duplicates (AAAResult *this, int (feq)(AAResult *e1, AAResult *e2));

/// Returns this JSONized.
///   this: Container.
char *aAAResult_to_js (AAAResult *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AAAResult *aAAResult_from_js (char *js);


//--// Not remove

#endif