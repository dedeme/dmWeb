// Copyright 29-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[OResult *].

#ifndef DATA_RESULT_AORESULT_H
  #define DATA_RESULT_AORESULT_H

#include "dmc/Arr.h"
#include "data/Result/OOResult.h"

#include "data/Result/OResult.h"

/// Arr[OResult *].
struct aOResult_AOResult {
  OResult **es; // Start elements.
  OResult **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  OResult **endbf; // End buffer.
};

/// Arr[OResult *].
typedef struct aOResult_AOResult AOResult;

/// Creates a new Array with buffer size of 15 elements.
AOResult *aOResult_new (void);

/// 'buffer' must be > 0.
AOResult *aOResult_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AOResult *aOResult_new_from (OResult *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AOResult *aOResult_new_c (int size, OResult **es);

/// Returns a new array with elements of 'this'.
AOResult *aOResult_copy (AOResult *this);

///
int aOResult_size (AOResult *this);

/// Resturn the element at position ix.
OResult *aOResult_get (AOResult *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aOResult_push (AOResult *this, OResult *e);

/// Returns and removes the last element.
OResult *aOResult_pop (AOResult *this);

/// Returns the las element.
OResult *aOResult_peek (AOResult *this);

/// Sets the element at position ix.
void aOResult_set (AOResult *this, int ix, OResult *e);

/// Inserts an element at position ix.
void aOResult_insert (AOResult *this, int ix, OResult *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aOResult_remove (AOResult *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aOResult_cat (AOResult *this, AOResult *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aOResult_insert_arr (AOResult *this, int ix, AOResult *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aOResult_remove_range (AOResult *this, int begin, int end);

/// Removes every element of 'this'.
void aOResult_clear (AOResult *this);

/// Reverses elements of 'this'.
void aOResult_reverse (AOResult *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aOResult_sort (AOResult *this, int (*greater)(OResult *e1, OResult *e2));

/// aOResult_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aOResult_shuffle (AOResult *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aOResult_all (AOResult *this, int (*pred)(OResult *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aOResult_any (AOResult *this, int (*pred)(OResult *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOResult_index (AOResult *this, int (*pred)(OResult *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOResult_last_index (AOResult *this, int (*pred)(OResult *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OOResult *aOResult_find(AOResult *this, int (*pred)(OResult *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OOResult *aOResult_find_last(AOResult *this, int (*pred)(OResult *e));

/// aOResult_filter_in removes every element which returns '0' with 'pred'.
void aOResult_filter_in (AOResult *this, int (*pred)(OResult *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AOResult *aOResult_take (AOResult *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AOResult *aOResult_takef (AOResult *this, int (*predicate)(OResult *e));

/// Returns a new Arr with elements left after aOResult_take.
AOResult *aOResult_drop (AOResult *this, int n);

/// Returns a new Arr with elements left after aOResult_takef.
AOResult *aOResult_dropf (AOResult *this, int (*predicate)(OResult *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AOResult *aOResult_filter_to (AOResult *this, int (*predicate)(OResult *e));

/// Returns a new Arr with elements generated by converter.
Arr *aOResult_map (AOResult *this, void *(*converter)(OResult *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aOResult_map2 (AOResult *this, void *(*conv1)(OResult *e), void *(*conv2)(OResult *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aOResult_zip (AOResult *a1, AOResult *a2, void *(*converter)(OResult *e1, OResult *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aOResult_zip3 (
  AOResult *a1, AOResult *a2, AOResult *a3,
  void *(*conveter)(OResult*e1, OResult*e2, OResult*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AOResult *aOResult_duplicates (AOResult *this, int (feq)(OResult *e1, OResult *e2));

/// Returns this JSONized.
///   this: Container.
char *aOResult_to_js (AOResult *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AOResult *aOResult_from_js (char *js);


//--// Not remove

/// Returns a matrix of 'cts_teams' x 'cts_teams' of 'none'.
AOResult *aOResult_new_nones (void);

#endif
