// Copyright 18-Apr-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Module page.
module pages.pmodule;

load es.dm.all;
buf = load es.dm.buf;
json = load es.dm.json;
load es.dm.jsonM;
mod = load data.mod;

typedef txT = {
    bf is buf.t,
    s is string,
    i is number
  };

typedef treeRsT = {
    tree is list<mod.treeEntryT>,
    html2 is string
  };

(
  readPackId fpath =
    ( read id ls =
        case ls of
        l::ls :
          ( l = strTrim l;
            if strStarts? l "module " then
              case cindex ';' l of
              Some ix : strSlice l 7 ix |> strTrim |> strLower;
              None () : ""
              esac;
            else
              read "" ls
            fi
          );
        _ :
          id
        esac;

      f = io.inFile fpath;
      id = read "" (io.toLines f);
      io.iclose f;
      id
   );

  tKey = "<em>typedef</em>";

  mKey = "<h3>Module signature</h3>";

  fKey = "class=\"field wdoc\">";

  fKey2 = "<span class=sn>";

  fKey2b = "<span class=vn>";

  lenFKey2 = strLength fKey2;

  add tx s = (buf.add tx.bf s; tx);

  sub tx i = strSlice tx.s tx.i i;

  move tx i = tx with {i};

  addMove tx i = move (add tx (sub tx i)) i;

  indexOf tx s = sindex' s tx.i tx.s;

  format s = (
    tx = {bf = buf.mk(), s, i = 0};
    tx = move tx (optGet (indexOf tx "<body>") + 6);

    ix = optGet (indexOf tx "</h2>") + 5;
    html1 = sub tx (ix);
    tx = move tx ix;

    tx =
      case indexOf tx "<div class=contents>" of
      None (): tx;
      Some i:
        tx = add tx (sub tx i);
        tx = move tx i;
        move tx (optGet (indexOf tx "</div>") + 6);
      esac;
    html2 = (buf.toStr tx.bf) ^ (strRight tx.s tx.i);
    {html1, html2});

  mkEntry entry tx id
  is mod.treeEntryT -> txT -> string -> mod.treeEntryT = (
    ch = strChar tx.s tx.i;
    if ch >= "A" and ch <= "Z"
    then entry with {enums = id::entry.enums}
    else (
      chunk = case indexOf tx "</div>" of
              None (): "&rarr;";
              Some i: sub tx i
              esac;
      case sindex "&rarr;" chunk of
      None (): entry with {ps = id::entry.ps};
      Some _: entry with {ms = id::entry.ms}
      esac)
    fi);

  mkTypeId tx =
    case indexOf tx "=" of
    None (): None ();
    Some i:
      chunk = sub tx i;
      i0 = strLastIndexOf' chunk ">";
      if i0 < 0
      then None ()
      else Some (strRight chunk (i0 + 1) |> strTrim |>
                 strReplace "&lt;" "<" |>
                 strReplace "&gt;" ">")
      fi
    esac;

  mkTree html allPath
  is string -> string -> treeRsT = (
    mk0 entry ls tx
    is mod.treeEntryT -> list<mod.treeEntryT> -> txT -> treeRsT = (
      mk1 ix ls tx = (
        addEntry () = (
          addEntry1 tx = (
            case indexOf tx "<" of
            None (): mk0 entry ls (addMove tx ix);
            Some i:
              id = sub tx i;
              tx = move tx i;
              if strStarts? id "`" or strStarts? id "."
              then mk0 entry ls tx
              else (
                entry = mkEntry entry tx id;
                tp = entry.tp;
                tx = add tx ("<span id=\"\(tp).\(id)\"></span>" ^
                             "<a href = \"?" ^
                             "\(allPath)&hp::\(tp).\(id)\">\(id)</a>");
                mk0 entry ls tx)
              fi
            esac);

          oi =
            case indexOf tx fKey2 of
            None (): indexOf tx fKey2b;
            Some i:
              case indexOf tx fKey2b of
              None (): Some(i);
              Some i2: Some(if i < i2 then i else i2 fi)
              esac
            esac;
          case oi of
          None (): mk0 entry ls (addMove tx ix);
          Some i:
            tx = add tx ((sub tx i) ^ "<span class='link'>");
            tx = move tx (i + lenFKey2);
            addEntry1 tx
          esac);

        {op, i} =
          case indexOf tx tKey of
          None ():
            case indexOf tx mKey of
            None (): {op = 0, i = ix};
            Some i:
              if (i > ix) then {op = 0, i = ix} else {op = 2, i = i} fi
            esac;
          Some i:
            case indexOf tx mKey of
            None (): if (i > ix) then {op = 0, i = ix} else {op = 1, i = i} fi;
            Some i2:
              if (ix < i) and (ix < i2) then {op = 0, i = ix}
              elif (ix > i) and (ix > i2) then {op = 2, i = i2}
              else {op = 1, i = i}
              fi
            esac
          esac;

        if op == 0 then
          if entry.tp == "" then mk0 (entry with {tp = "~"}) ls
                                     (addMove tx ix)
          else addEntry ()
          fi
        elif op == 1 then (
          tx = addMove tx i;
          id = case mkTypeId tx of None (): "?"; Some idf: idf esac;
          ls = if entry.tp == "" then ls else entry::ls fi;
          entry = {tp = id, enums = [], ms = [], ps = []};
          mk0 entry ls (addMove tx (tx.i + 1)))
        else (
          ls = if entry.tp == "" then ls else entry::ls fi;
          entry = {tp = '~', enums = [], ms = [], ps = []};
          mk0 entry ls (addMove tx (i + 1)))
        fi);

      case indexOf tx fKey of
      None (): {tree = if entry.tp == "" then ls else entry::ls fi,
                html2 = (buf.toStr tx.bf) ^ (strRight tx.s tx.i)};
      Some i: mk1 i ls tx
      esac);

    mk0 {tp = "", enums = [], ms = [], ps = []} []
        {bf = buf.mk(), s = html, i = 0});

{
  /// Request process.
  ///
  /// Arguments:
  ///   ck - Communication key.
  ///   rq - Request.
  process ck rq is
  string -> map<string, json.t> -> string =
    lib = cgi.rqString rq "lib";
    libPath = cgi.rqString rq "libPath";
    modPath = cgi.rqString rq "modPath";
    sourcePath = libPath ^/ modPath ^ ".yeti";
    packId = readPackId sourcePath;
    docFile = (path.parent libPath) ^/ "doc" ^/ packId ^ ".html";
    allPath = lib ^ "&" ^ modPath;

    rp =
      if file.exists? docFile then
        {html1, html2} = format (file.readAll docFile);
        link = {name = path.name modPath, link = "?" ^ allPath ^ "&hp::"};
        {tree, html2} = mkTree html2 allPath;
        Some (mod.mk (path.name modPath) html1 html2 link tree);
      else
        None ();
      fi;

    cgi.rp ck [ "data": jswMaybe mod.toJs rp ],

})