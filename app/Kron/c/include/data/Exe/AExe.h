// Copyright 25-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[Exe *].

#ifndef DATA_EXE_AEXE_H
  #define DATA_EXE_AEXE_H

#include "dmc/Arr.h"
#include "data/Exe/OExe.h"

#include "data/Exe.h"

/// Arr[Exe *].
struct aExe_AExe {
  Exe **es; // Start elements.
  Exe **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  Exe **endbf; // End buffer.
};

/// Arr[Exe *].
typedef struct aExe_AExe AExe;

/// Creates a new Array with buffer size of 15 elements.
AExe *aExe_new (void);

/// 'buffer' must be > 0.
AExe *aExe_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AExe *aExe_new_from (Exe *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AExe *aExe_new_c (int size, Exe **es);

/// Returns a new array with elements of 'this'.
AExe *aExe_copy (AExe *this);

///
int aExe_size (AExe *this);

/// Resturn the element at position ix.
Exe *aExe_get (AExe *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aExe_push (AExe *this, Exe *e);

/// Returns and removes the last element.
Exe *aExe_pop (AExe *this);

/// Returns the las element.
Exe *aExe_peek (AExe *this);

/// Sets the element at position ix.
void aExe_set (AExe *this, int ix, Exe *e);

/// Inserts an element at position ix.
void aExe_insert (AExe *this, int ix, Exe *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aExe_remove (AExe *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aExe_cat (AExe *this, AExe *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aExe_insert_arr (AExe *this, int ix, AExe *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aExe_remove_range (AExe *this, int begin, int end);

/// Removes every element of 'this'.
void aExe_clear (AExe *this);

/// Reverses elements of 'this'.
void aExe_reverse (AExe *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aExe_sort (AExe *this, int (*greater)(Exe *e1, Exe *e2));

/// aExe_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aExe_shuffle (AExe *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aExe_all (AExe *this, int (*pred)(Exe *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aExe_any (AExe *this, int (*pred)(Exe *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aExe_index (AExe *this, int (*pred)(Exe *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aExe_last_index (AExe *this, int (*pred)(Exe *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OExe *aExe_find(AExe *this, int (*pred)(Exe *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OExe *aExe_find_last(AExe *this, int (*pred)(Exe *e));

/// aExe_filter_in removes every element which returns '0' with 'pred'.
void aExe_filter_in (AExe *this, int (*pred)(Exe *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AExe *aExe_take (AExe *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AExe *aExe_takef (AExe *this, int (*predicate)(Exe *e));

/// Returns a new Arr with elements left after aExe_take.
AExe *aExe_drop (AExe *this, int n);

/// Returns a new Arr with elements left after aExe_takef.
AExe *aExe_dropf (AExe *this, int (*predicate)(Exe *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AExe *aExe_filter_to (AExe *this, int (*predicate)(Exe *e));

/// Returns a new Arr with elements generated by converter.
Arr *aExe_map (AExe *this, void *(*converter)(Exe *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aExe_map2 (AExe *this, void *(*conv1)(Exe *e), void *(*conv2)(Exe *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aExe_zip (AExe *a1, AExe *a2, void *(*converter)(Exe *e1, Exe *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aExe_zip3 (
  AExe *a1, AExe *a2, AExe *a3,
  void *(*conveter)(Exe*e1, Exe*e2, Exe*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AExe *aExe_duplicates (AExe *this, int (feq)(Exe *e1, Exe *e2));

/// Returns this JSONized.
///   this: Container.
char *aExe_to_js (AExe *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AExe *aExe_from_js (char *js);


//--// Not remove

#endif