// Copyright 25-Dec-2021 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[Ann *].

#ifndef DATA_ANN_AANN_H
  #define DATA_ANN_AANN_H

#include "dmc/Arr.h"
#include "data/Ann/OAnn.h"

#include "data/Ann.h"

/// Arr[Ann *].
struct aAnn_AAnn {
  Ann **es; // Start elements.
  Ann **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  Ann **endbf; // End buffer.
};

/// Arr[Ann *].
typedef struct aAnn_AAnn AAnn;

/// Creates a new Array with buffer size of 15 elements.
AAnn *aAnn_new (void);

/// 'buffer' must be > 0.
AAnn *aAnn_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AAnn *aAnn_new_from (Ann *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AAnn *aAnn_new_c (int size, Ann **es);

/// Returns a new array with elements of 'this'.
AAnn *aAnn_copy (AAnn *this);

///
int aAnn_size (AAnn *this);

/// Resturn the element at position ix.
Ann *aAnn_get (AAnn *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aAnn_push (AAnn *this, Ann *e);

/// Returns and removes the last element.
Ann *aAnn_pop (AAnn *this);

/// Returns the las element.
Ann *aAnn_peek (AAnn *this);

/// Sets the element at position ix.
void aAnn_set (AAnn *this, int ix, Ann *e);

/// Inserts an element at position ix.
void aAnn_insert (AAnn *this, int ix, Ann *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aAnn_remove (AAnn *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aAnn_cat (AAnn *this, AAnn *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aAnn_insert_arr (AAnn *this, int ix, AAnn *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aAnn_remove_range (AAnn *this, int begin, int end);

/// Removes every element of 'this'.
void aAnn_clear (AAnn *this);

/// Reverses elements of 'this'.
void aAnn_reverse (AAnn *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aAnn_sort (AAnn *this, int (*greater)(Ann *e1, Ann *e2));

/// aAnn_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aAnn_shuffle (AAnn *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aAnn_all (AAnn *this, int (*pred)(Ann *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aAnn_any (AAnn *this, int (*pred)(Ann *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAnn_index (AAnn *this, int (*pred)(Ann *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aAnn_last_index (AAnn *this, int (*pred)(Ann *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OAnn *aAnn_find(AAnn *this, int (*pred)(Ann *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OAnn *aAnn_find_last(AAnn *this, int (*pred)(Ann *e));

/// aAnn_filter_in removes every element which returns '0' with 'pred'.
void aAnn_filter_in (AAnn *this, int (*pred)(Ann *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AAnn *aAnn_take (AAnn *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AAnn *aAnn_takef (AAnn *this, int (*predicate)(Ann *e));

/// Returns a new Arr with elements left after aAnn_take.
AAnn *aAnn_drop (AAnn *this, int n);

/// Returns a new Arr with elements left after aAnn_takef.
AAnn *aAnn_dropf (AAnn *this, int (*predicate)(Ann *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AAnn *aAnn_filter_to (AAnn *this, int (*predicate)(Ann *e));

/// Returns a new Arr with elements generated by converter.
Arr *aAnn_map (AAnn *this, void *(*converter)(Ann *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aAnn_map2 (AAnn *this, void *(*conv1)(Ann *e), void *(*conv2)(Ann *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aAnn_zip (AAnn *a1, AAnn *a2, void *(*converter)(Ann *e1, Ann *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aAnn_zip3 (
  AAnn *a1, AAnn *a2, AAnn *a3,
  void *(*conveter)(Ann*e1, Ann*e2, Ann*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AAnn *aAnn_duplicates (AAnn *this, int (feq)(Ann *e1, Ann *e2));

/// Returns this JSONized.
///   this: Container.
char *aAnn_to_js (AAnn *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AAnn *aAnn_from_js (char *js);


//--// Not remove

/// Adds an annotation. The annotaion idenfitier is set automatically in 'ann'.
void aAnn_add (AAnn *anns, Ann *ann);

/// Modify an annotation.
/// If the identifier of 'ann' is not found in 'anns', function does nothing.
void aAnn_modify (AAnn *anns, Ann *ann);

/// Removes the annotation with identifier 'id'.
/// If the identifier is not found, function does nothing.
void aAnn_delete (AAnn *anns, int id);

#endif
