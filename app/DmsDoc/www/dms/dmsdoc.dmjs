// Copyright 14-Nov-2019 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

"dm/client" import
"dm/menu" import
"dm/wg" import
"dm/location" import
"common/conf" import
"common/libs" import
"pages/expired" import
"pages/auth" import
"pages/bye" import
"pages/paths" import
"pages/index" import
"pages/module" import
"pages/code" import
"i18n" import

(i18n,_) : _ =>
(i18n,__) : __ =>

(init.; show.; update.) : reload! =>

// Model

"DmsDoc" : APP =
"201911" : VERSION =

{
  "app": APP
  "version": VERSION
  "client" : 1 APP (APP_DATA expired,show) client,new
  "lang": "en"
  "showAll?": 1
  "menu": 0 menu,new
  "libs": []

  "helpAndCredits": "span" { style: "font-size: small;" } [] ui,$+
  "menuDiv": "div" ui,mk
  "view": "div" ui,mk
} map,from APP_DATA =

// View

(@+
  "div" {removeAll} [
      APP_DATA .menuDiv
      APP_DATA .view
      "p" { html: "&nbsp;" } [] ui,$+
      "hr" ui,mk
      "table" { class: "main" } [
          "tr" {} [
              "td" {} [
                  "a" {
                    att: href "doc/about.html"
                    att: target "blank"
                  } [ APP_DATA .helpAndCredits ] ui,$+
                ] ui,$+
              "td" {
                  style: ("text-align: right;font-size: 10px;"
                          "color:#808080;font-size:x-small;" +)
                  html: ("- © ºDeme. ${APP} (${VERSION}) -")
                } [] ui,$+
            ] ui,$+
        ] ui,$+
    ]
    50 (pop; "br" ui,mk lst,push+) for
    ui,$+
@-<Element>) wg. =>

(@+
  "@body" { removeAll } [ wg. ] ui,$
@-) show. =>

(@+l:: Ls =
  APP_DATA .menu : Mn =

  Mn
    "a" {
        att: href (location,hrefBase "?@" +)
        att: id "menu_@"
      } [
        "asterisk" wg,img { style: "vertical-align:middle" } [] ui,$+
      ] ui,$+ menu,addLeft

  Ls libs,readIds
  ( id =;
    Mn menu,separator menu,addLeft
    Mn : "" id id menu,mkLink : menu,addLeft
  )
  lst,each

  Mn
    (fbye.)
    menu,mkClose menu,addRight

  APP_DATA .menuDiv {} [ APP_DATA .menu : menu,wg ] ui,$
@-) menu. =>

// Control ---------------------------------------------------------------------

(@+
  APP_DATA
    "menu" : 0 menu,new : map,put+
    "libs": [] data : map,put+
    "menuDiv": "div" ui,mk: map,put+
    "view": "div" ui,mk : map,put
@-) init. =>

(@+
  APP_DATA .client
  {
    "page": "main" js,ws
    "rq": "getDb" js,ws
  } map,from
  (@m:: Rq =
    Rq .conf conf,fromJs : Cf =
    Rq .libs libs,fromJs : Ls =

    Cf .lang i18n,init
    APP_DATA : "lang" : Cf .lang : map,put+
      "showAll?" : Cf .showAll? : map,put+
      .helpAndCredits { text: ("Help & Credits":_) } [] ui,$

    Ls menu.
    APP_DATA "libs" Ls map,put

    wg,url : url =
    url map,size
    ( url .0) ( Cf .menu) elif : apath =
    apath "" == (Cf .menu) (apath) elif : apath =
    Cf "menu" apath map,put

    APP_DATA .client
    {
      "page": "main" js,ws
      "rq": "setConf" js,ws
      "conf": Cf conf,toJs
    } map,from
    ( pop)
    client,send

    apath "@" ==
    (
      APP_DATA dup .menu "@" menu,setSelected
      paths,new paths,show
    )
    (
      apath "@" str,index : ix =
      ix : -1 : ==
      (
        APP_DATA apath index,new index,show
      )
      (
        apath ix str,left : lib =
        apath : ix 1 + : str,right : lpath =
        url "1" map,has?
        ( APP_DATA lib lpath url .1 code,new code,show)
        ( APP_DATA lib lpath module,new module,show)
        elif
      )
      elif
    )
    elif
  )
  client,send
@-) appRun. =>

(@+
  APP_DATA .client
  (
    ( appRun.)
    ( APP_DATA auth,new auth,show)
    elif
  )
  client,connect
@-) update. =>

(@+
  APP_DATA .client
  {
    "page": "logout" js,ws
  } map,from
  (
    APP_DATA bye,new bye,show
  )
  client,send
@-) fbye. =>

reload!

empty? assert
