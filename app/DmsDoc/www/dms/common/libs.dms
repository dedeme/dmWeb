// Copyright 15-Nov-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

0
dup : ID. =
++ dup : PATH. =
++ dup : SHOW?. =
++ : EXISTS?. =

( @+
  lst,new
@-l) new =>

(@+l:: this,ID. lst,get @-s) id =>
(@+l:: this,PATH. lst,get @-s) lpath =>
(@+l:: this,SHOW?. lst,get @-i) show? =>
(@+li:: v =; this,SHOW?. v lst,set @-) setShow? =>
(@+l:: this,EXISTS?. lst,get @-i) exists? =>
(@+li:: v =; this,EXISTS?. v lst,set @-) setExists? =>

( @+lssi:: show? =; lpath =; id =; Ls =
  Ls [id, lpath, 1, 0] data lst,push+
  ( R1 =; R2 =; R1 this,id : R2 this,id : >) lst,sort
@-) add =>

( @+ls:: id =; Ls =
  Ls ( this,id : id : ==) lst,indexf : ix =
  ix -1 != (Ls ix lst,remove) if
@-) remove =>

( @+lsssi:: show? =; lpath =; newId =; id =; Ls =
  Ls id this,remove
  Ls newId lpath show? this,add
@-) modify =>

( @+l
  ( R =;
    [R !0 js,ws, R !1 js,ws, R !2 js,wb, R !3 js,wb] data
      js,wa
  ) lst,toJs
@-s) toJs =>

( @+s
  ( js,ra : R =;
    [R !0 js,rs, R !1 js,rs, R !2 js,rb, R !3 js,rb] data
  ) lst,fromJs
@-l) fromJs =>

( @+l
  (R =; 0 R this,show? (R this,exists? (pop 1) if) if)
    lst,filter
    (this,id) lst,map
@-l) readIds =>
