// Copyright 21-Nov-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

"../dm/cgi" import
"../io" import
"../../www/dms/common/libs" import
("../../www/dms/common/indexTree", t) import

(@+m:: Rq =
  Rq .id js,rs : id =

  io,readLibs libs,fromJs (libs,id id ==) lst,find
  ( R =
    R libs,lpath : root =
    root str,len : skipRoot =

    (@+s dir =
      lst,new : Rs =
      dir file,dir
        ( f =
          dir f path,+ : fpath =
          fpath file,directory?
          ( Rs :: fpath mkTree wrap,some : f : "" : "" : t,new :: lst,push)
          (
            f ".dms" str,ends?
            (
              f -4 str,left : f =
              dir str,len skipRoot == ("") (dir : skipRoot 1 + : str,right) elif
                lpath =
              Rs
                wrap,none : f : lpath : fpath this,fdoc : t,new
                lst,push
            )
            if
          )
          elif
        ) lst,each
      Rs
    @-l) mkTree =>

    root file,directory?
    (
      root mkTree wrap,some : "root" : "" : "" : t,new t,toJs
    )
    ( js,wn)
    elif
  )
  ( js,wn)
  wrap,option : index =

  { "index": index } map,from cgi,ok
@-s) process =>
/// @m -> @s

(@+s f =
  f file,ropen : Rf =
  (
    Rf file,readLine : l =
    l "" ==
    ( ""; break)
    (
      l str,trim : l =
      l "#!" str,starts? : l "//" str,starts? : l "" == : || ||
      (
        l "///" str,starts?
        (
          l ". " str,index : ix =
          ix -1 ==
          (l : 3 : str,right : str,trim)
          (l : 3 : ix 1 + : str,sub : str,trim)
          elif
          break;
        )
        if
      )
      ( ""; break)
      elif
    )
    elif
  )
  loop
  Rf file,close
@-s) fdoc =>
