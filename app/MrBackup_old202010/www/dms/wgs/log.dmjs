// Copyright 24-Dic-2019 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Log widget.

"../common/log" import
"../dm/wg" import

( @+mll:: FClear =; FReload =; Pg =
  {
    "fClear": FClear
    "fReload": FReload
    "page": Pg
    "log": log,newLog
    "day": 1
    "week": 0
    "ever": 0
    "error": 1

    "lmenu": "div" ui,mk
    "rmenu": "div" ui,mk
    "area": "div" ui,mk
  } map,from
  dup this,update
@-m) new =>
/// @ -> @m::log

( @+m:: Log =
  "div" {} [
      "table" { class: "frame3"; att: align "center" } [
          "tr" {} [
              "td" { style: "text-align:left" } [ Log .lmenu ] ui,$+
              "td" { style: "text-align:right" } [ Log .rmenu ] ui,$+
            ] ui,$+
          "tr" {} [
              "td" { att: colspan "2" } [] ui,$+
            ] ui,$+
          "tr" {} [
              "td" { att: colspan "2" } [ Log .area ] ui,$+
            ] ui,$+
        ] ui,$+
    ] ui,$+
@-<Element>) wg =>
/// @m::log -> @<Element>::e

( @+isl:: Cb =; text =;
  ( "span" { class: "frame"; text: (text) } [])
  ( Cb wg,link { class: "link"; text: (text) } [])
  elif
  ui,$+
@-<Element>) mkMenuEntry. =>

/// Control --------------------------------------------------------------------

( @+m::
  "day" 1 map,put+
  "week" 0 map,put+
  "ever" 0 map,put+

  this,update
@-) onLastDay. =>

( @+m::
  "day" 0 map,put+
  "week" 1 map,put+
  "ever" 0 map,put+

  this,update
@-) onLastWeek. =>

( @+m::
  "day" 0 map,put+
  "week" 0 map,put+
  "ever" 1 map,put+

  this,update
@-) onEver. =>

( @+m::
  this,reload
@-) onReload. =>

( @+m::
  "error" 1 map,put+

  this,update
@-) onError. =>

( @+m::
  "error" 0 map,put+

  this,update
@-) onAll. =>

( @+m:: Log =
  "Clear log?":_ sys,confirm?
  (
    Log .page : Log .fClear : run
    Log "log" log,newLog map,put+
      this,update
  )
  ( pop)
  elif
@-) onClear. =>

( @+m:: # Log# =
  (@+l:: log,dateJs :: time,now : -1 : time,addDays :: > @i) : TodayFn =
  (@+l:: log,dateJs :: time,now : -7 : time,addDays :: > @i) : WeekFn =
  (@+l:: log,type "E" ==) : ErrorFn =

  Log# .log wrap,ref : LgData =
  Log# .day (LgData (TodayFn lst,filter) ^^) if
  Log# .week (LgData (WeekFn lst,filter) ^^) if
  Log# .error (LgData (ErrorFn lst,filter) ^^) if

  LgData >> lst,copy dup lst,reverse
  ( E =
    E log,type "E" == ("logE") ("logI") elif : tdClass =
    E log,dateJs "%d/%m/%Y (%H:%M:%S) - " time,format : date =
    E log,msg : msg =
    "tr" {} [
        "td" {
            class: (tdClass)
            style: "width:50px; white-space:nowrap;"
            text: (date)
          } [] ui,$+
        "td" { class: (tdClass); text: (msg) } [] ui,$+
      ] ui,$+
  )
  lst,map : Trs =

  "table" { class: "main" } Trs ui,$+ : DataTable =

  Log# .lmenu { removeAll } [
      Log# .day : "Last Day":_ : (Log# this,onLastDay.) : this,mkMenuEntry.
      "span" { text: " · " } [] ui,$+
      Log# .week : "Last Week":_ : (Log# this,onLastWeek.) : this,mkMenuEntry.
      "span" { text: " · " } [] ui,$+
      Log# .ever : "All":_ : (Log# this,onEver.) : this,mkMenuEntry.
    ] ui,$

  Log# .rmenu { removeAll } [
      0 : "Reload":_ : (Log# this,onReload.) : this,mkMenuEntry.
      "span" { text: " | " } [] ui,$+
      Log# .error : "Errors":_ : (Log# this,onError.) : this,mkMenuEntry.
      "span" { text: " · " } [] ui,$+
      Log# .error ! : "All":_ : (Log# this,onAll.) : this,mkMenuEntry.
      "span" { text: " | " } [] ui,$+
      0 : "Clear":_ : (Log# this,onClear.) : this,mkMenuEntry.
    ] ui,$

  Log# .area { removeAll } [
      "table" { att: align "center" } [
          "tr" {} [
              "td" {} [
                  "div" { class: "log" } [ DataTable ] ui,$+
                ] ui,$+
            ] ui,$+
        ] ui,$+
    ] ui,$

@-) update =>

( @+m:: # Log# =
  Log# .page
    ( LogData =
      Log# "log" LogData map,put+
      this,update
    )
    Log# .fReload run
@-) reload =>
