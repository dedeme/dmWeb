// Copyright 22-Dic-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Http server.

"scheduler" import
"server/hub" import
"io/log" import

( @+<Iserver>:: Sv =
  "Server started":_ log,info
  0 wrap,ref : Finished =
  0 wrap,ref : ErrorCounter =
  (
    Sv iserver,getRq
    ( @<IserverRq>:: Rq =
      Rq iserver,readRq
      ( @s:: msg =
        ( msg "end" ==)
        (
          Rq iserver,rqHost
          ( host =
            host "127.0.0.1" ==
            (
              Finished 1 <<
              Rq "" iserver,writeRp
            )
            ( "Try to stop server from %0":_ [host] __ log,error)
            elif
          )
          ()
          wrap,option
        )
        else
        ( msg "test" ==)
        (
          Rq iserver,rqHost
          ( host =
            host "127.0.0.1" ==
            ( Rq "Ok" iserver,writeRp)
            ( "Try to test server from %0":_ [host] __ log,error)
            elif
          )
          ()
          wrap,option
        )
        else
        ( Rq msg hub,process)
        if
      )
      (
        Finished >>
        (
          scheduler,MrBusy >>
          (
            "Waiting for finishing MrBackup":_ log,info
            "sleep 15" sys,cmd pop
           )
          (
            "Server stopped":_ log,info
            break
          )
          elif
        )
        ( 150 sys,sleep)
        elif
      )
      wrap,option
    )
    ( @+s:: error =
      ErrorCounter (++) ^^
      (ErrorCounter >> 5 >)
      (("Server: Fail reading":_ log,info))
      else
      (ErrorCounter >> 100 >)
      (
        ("Server: Fail reading (+ 100)":_ log,error )
        ErrorCounter 0 <<
      )
      else
      if
    @-)
    wrap,either
  ) loop
@-) start =>
/// @<Iserver>::sv -> @

