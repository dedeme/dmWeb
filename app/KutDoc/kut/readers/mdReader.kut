// Copyright 06-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

import "data/doc";
import "data/docEntry";
import "db/pathsTb";

/// Module reader.

// \s -> [s, s] | []
takeId = \s -> {
  ix = str.index(s, "=");
  if (ix == -1) return [];
  return [str.rtrim(s[:ix]), str.ltrim(s[ix + 1:])];
};

/// \s, s -> [m]
read = \pack, pt -> {
  Ppath = arr.find(pathsTb.read(), \P -> return P.id == pack;);
  if (arr.size(Ppath) == 0) return [];

  fpath = path.cat([Ppath!.path, pt + ".kut"]);
  if (!file.exists(fpath)) return [];

  R = [];
  Doc = [""];
  Funcs = [];
  Vals = [];

  f = file.ropen(fpath);
  St = ["init0"]; // states are "init0", "init", "doc", "code0", "code"
  FirstDoc = [true];
  DocBf = [""];
  Id = [""];
  Code = [""];
  CodeLines = [0];
  L = [""];
  while () {
    if (L! == "") {
      Lf = file.readLine(f);
      if (arr.size(Lf) == 0) break;
      else L! = Lf!;
    }

    l = str.trim(L!);
    L! = "";
    switch (St!) {
    "init0":
      if (str.starts(l, "import ")) {
        FirstDoc! = false;
        St! = "init";
      } else if (str.starts(l, "///")) {
        tx = l[4:];
        DocBf! = tx;
        St! = "doc";
      };
    "init":
      if (str.starts(l, "///")) {
        tx = l[4:];
        DocBf! = tx;
        St! = "doc";
      }
    "doc":
      if (str.starts(l, "///")) {
        if (l == "///") DocBf! += "\n";
        else DocBf! += "\n" + l[4:];
      } else {
        if (FirstDoc!) {
          Doc! = DocBf!;
          FirstDoc! = false;
        }
        IdRest = takeId(l);
        if (arr.size(IdRest) == 2)  {
          Id! = IdRest[0];
          L! = IdRest[1];
          St! = "code0";
        } else {
          St! = "init";
        }
      }
    "code0":
      if (l != "") {
        if (!str.starts(l, "\\")) {
          arr.push(Vals, docEntry.new(Id!, DocBf!, Id!, Id!));
          St! = "init";
        } else {
          ix = str.index(l, "->");
          if (ix != -1) {
            arr.push(
              Funcs,
              docEntry.new(
                Id!,
                DocBf!,
                Id! + " = " + l[:ix + 2],
                Id!
              )
            );
            St! = "init";
          } else {
            Code! = Id! + " = " + l + "\n";
            CodeLines! = 1;
            St! = "code";
          }
        }
      }
    "code":
      if (CodeLines! > 5) {
        arr.push(
          Funcs,
          docEntry.new(
            Id!,
            DocBf!,
            Code! + " ...",
            Id!
          )
        );
        St! = "init";
      } else {
        if (l != "") {
          ix = str.index(l, "->");
          if (ix != -1) {
            arr.push(
              Funcs,
              docEntry.new(
                Id!,
                DocBf!,
                Code! + "  " +  l[:ix + 2],
                Id!
              )
            );
            St! = "init";
          } else {
            Code! += "  " + l + "\n";
            CodeLines! += 1;
          }
        }
      }
    }
  }
  file.close(f);

  return [doc.new(Doc!, Funcs, Vals)];
};
