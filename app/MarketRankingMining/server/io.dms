// Copyright 17-Dic-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

"../www/dms/common/row" import

"/home/deme/.dmCApp/MultiMarket/data/fleas" : dataRoot =
this,dataRoot "_rank/pool.db" path,+ : poolDb =
this,dataRoot "_rank/ranks.db" path,+ : ranksDb =

(@+
  0 wrap,ref : N =
  0 wrap,ref : N40 =
  "99999999" wrap,ref : Date =
  0 wrap,ref : MaxAssets =
  9999999 wrap,ref : MinAssets =
  0 wrap,ref : SumAssets =
  0 wrap,ref : MaxPoints =
  9999999 wrap,ref : MinPoints =
  0 wrap,ref : SumPoints =

  lst,new : Models =
  this,dataRoot file,dir
    (f =; f "_" str,starts? ! : f ".db" str,ends? ! : &&) lst,filter
  dup (>) lst,sort
  ( model =
    0 wrap,ref : F_N =
    0 wrap,ref : F_N40 =
    "99999999" wrap,ref : F_Date =
    0 wrap,ref : F_MaxAssets =
    9999999 wrap,ref : F_MinAssets =
    0 wrap,ref : F_SumAssets =
    0 wrap,ref : F_MaxPoints =
    9999999 wrap,ref : F_MinPoints =
    0 wrap,ref : F_SumPoints =

    this,poolDb file,read js,ra
    ( js,ra : Flea =
      Flea !0 js,rs : fmodel =
      Flea !1 js,ra !0 js,rs : fdate =
      Flea !2 js,ri : fassets =
      Flea !3 js,ri : fpoints =

      fmodel model == (
        F_N (++) ^^
        fdate F_Date >> < (F_Date fdate <<) if
        fassets F_MaxAssets >> > (F_MaxAssets fassets <<) if
        fassets F_MinAssets >> < (F_MinAssets fassets <<) if
        F_SumAssets (fassets +) ^^
        fpoints F_MaxPoints >> > (F_MaxPoints fpoints <<) if
        fassets F_MinPoints >> < (F_MinPoints fpoints <<) if
        F_SumPoints (fpoints +) ^^
      ) if
    ) lst,each

    F_N >> 0 >
    ( this,ranksDb file,read js,ra : Ranks =
      Ranks : Ranks lst,size 1 - : lst,get : js,ra
        !1 : js,ra
      ( js,ra : Flea =
        Flea !0 js,rs : fmodel =

        fmodel model == (F_N40 (++) ^^) if
      ) lst,each

      N (F_N >> +) ^^
      N40 (F_N40 >> +) ^^

      F_Date >> : Date >> : <
      ( Date : F_Date >> : <<)
      if

      F_MaxAssets >> : MaxAssets >> : >
      ( MaxAssets : F_MaxAssets >> : <<)
      if

      F_MinAssets >> : MinAssets >> : <
      ( MinAssets : F_MinAssets >> : <<)
      if

      SumAssets (F_SumAssets >> +) ^^

      F_MaxPoints >> : MaxPoints >> : >
      ( MaxPoints : F_MaxPoints >> : <<)
      if

      F_MinPoints >> : MinPoints >> : <
      ( MinPoints : F_MinPoints >> : <<)
      if

      SumPoints (F_SumPoints >> +) ^^

      Models
        model
        F_N >>
        F_N40 >>
        F_Date >>
        F_MaxAssets >>
        F_MinAssets >>
        F_SumAssets >> : F_N >> : /
        F_MaxPoints >>
        F_MinPoints >>
        F_SumPoints >> : F_N >> : /
        row,new
          lst,push
    )
    if
  ) lst,each
  Models
    "Totals"
    N >>
    N40 >>
    Date >>
    MaxAssets >>
    MinAssets >>
    SumAssets >> : N >> : /
    MaxPoints >>
    MinPoints >>
    SumPoints >> : N >> : /
    row,new
@-ll) readData =>
/// @ -> @l::models, @l::totals
///
/// ----- : Returns
/// models: List of rows with data of each model.
/// totals: Row with totals.
