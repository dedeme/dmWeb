// Copyright 23-Dic-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Summary page.

"../i18n" import
"../wgs/log" import
"../dm/client" import
"../dm/wg" import
"../dm/location" import
"../common/sts" import
"../common/upSts" import
("../common/log" dlog) import

( @+m # Pg# =
  Pg#
  "log" Pg# (this,reload) (this,clear) log,new map,put+

  "stateDiv" "div" ui,mk map,put+
  "statsDiv" "div" ui,mk map,put+
  "updateDiv" "div" ui,mk map,put+
  "updateBtDiv" "div" ui,mk map,put+
@-m) new =>
/// @m::page -> @m::page

( @+m:: # Pg# =
  Pg# .view { removeAll } [
      "div" { style: "text-align:center" } [
          "div" { class: "head", html: ("State":_) } [] ui,$+
          Pg# .stateDiv
        ] ui,$+
      "div" { style: "text-align:center" } [
          "div" { class: "head", html: ("Statistics":_) } [] ui,$+
          Pg# .statsDiv
        ] ui,$+
      "div" { style: "text-align:center" } [
          "div" { class: "head", html: ("Update":_) } [] ui,$+
          Pg# .updateDiv
        ] ui,$+
      "div" { style: "text-align:center" } [
          "div" { class: "head", html: ("Log":_) } [] ui,$+
          Pg# .log log,wg
        ] ui,$+
    ] ui,$

  Pg# .stateDiv {removeAll} [ "wait.gif" wg,img ] ui,$
  Pg# .updateDiv {removeAll} [
      "button" {
          text: ("Show":_)
          on: (click (Pg# this,updateStats.))
        } [] ui,$+
    ] ui,$
  Pg# this,update.
@-) show =>
/// @m::page -> @

( @+<Element>m:: stats =; div =
  div { removeAll } [
      "table" {class: "white", att: align "center"} [
          "tr" {} [
              "td" { class: "entry"; text: ("Pools":_) } [] ui,$+
              "td" { class: "number2"} [] ui,$+
              "td" { class: "number2"; text: (stats .pools toStr) } [] ui,$+
            ] ui,$+
          "tr" {} [
              "td" {
                  class: "entry2"; text: ("Pools in bad condition":_)
                } [] ui,$+
              "td" {
                  class: "number2"; text: (stats .wrongPools toStr)
                } [] ui,$+
              "td" { class: "number2"} [] ui,$+
            ] ui,$+
          "tr" {} [
              "td" { class: "entry"; text: ("Directories":_) } [] ui,$+
              "td" { class: "number2"} [] ui,$+
              "td" { class: "number2"; text: (stats .dirs toStr) } [] ui,$+
            ] ui,$+
          "tr" {} [
              "td" {
                  class: "entry2"; text: ("Directories in bad condition":_)
                } [] ui,$+
              "td" {
                  class: "number2"; text: (stats .wrongDirs toStr)
                } [] ui,$+
              "td" { class: "number2"} [] ui,$+
            ] ui,$+
        ] ui,$+
    ] ui,$
@-) showStats. =>

( @+mm:: # stats =; Pg# =
  Pg# .updateDiv { removeAll } [
      "table" {class: "white", att: align "center"} [
          "tr" {} [
              "td" { class: "entry"; text: ("Files":_) }  [] ui,$+
              "td" { class: "number2"} [] ui,$+
              "td" { class: "number2"; text: (stats .files toStr) } [] ui,$+
            ] ui,$+
          "tr" {} [
              "td" {
                  class: "entry2"; text: ("Directories out of data":_)
                } [] ui,$+
              "td" {
                  class: "number2"; text: (stats .toUpdateDirs toStr)
                } [] ui,$+
              "td" { class: "number2" } [] ui,$+
            ] ui,$+
          "tr" {} [
              "td" { class: "entry2"; text: ("Files out of data":_) } [] ui,$+
              "td" {
                  class: "number2"; text: (stats .toUpdateFiles toStr)
                } [] ui,$+
              "td" { class: "number2"} [] ui,$+
            ] ui,$+
        ] ui,$+
      "br" ui,mk
      Pg# .updateBtDiv {} [
          "button" {
              text: ("Update":_)
              on: (click (Pg# this,mkBackups.))
            } [] ui,$+
        ] ui,$+
    ] ui,$
@-) showUpdateStats. =>

// Control ---------------------------------------------------------------------

( @+m:: # Pg# =
  Pg# .client
  {
    "page": "Summary" js,ws
    "rq": "idata" js,ws
  } map,from
  ( Rq =
    Rq .state js,rb : state =
    Rq .stats sts,fromJs : stats =

    state ("#55a0a5") ("#a50000") elif : ledColor =
    Pg# .stateDiv { removeAll } [
      15 ledColor wg,led {
          att: title (state ("Ok":_) ("Wrong":_) elif)
        } [] ui,$+
    ] ui,$

    Pg# .statsDiv stats this,showStats.

    Pg# .log dup log,reload
  )
  client,send
@-) update. =>

( @+m:: # Pg# =
  Pg# .updateDiv {removeAll} [ "wait.gif" wg,img ] ui,$
  Pg# .client
  {
    "page": "Summary" js,ws
    "rq": "update" js,ws
  } map,from
  ( Rq# =
    chan,new : Ch =
    (
      Pg# .client
      {
        "page": "Summary" js,ws
        "rq": "update2" js,ws
        "tmp": Rq# .ftmp
      } map,from
      ( Ch chan,send)
      client,send
    ) Cb* =
    Cb* sys,go

    ( Rq = ;
      Rq map,size 0 ==
      ( 200 (Cb* sys,go) sys,delay)
      (
        Rq .stats upSts,fromJs : stats =
        Pg# stats this,showUpdateStats.
      )
      elif
    ) Ch chan,recv
  )
  client,send
@-) updateStats. =>

( @+ml:: # Fn# =; Pg =
  Pg .client
  {
    "page": "Summary" js,ws
    "rq": "log" js,ws
  } map,from
  ( .log dlog,fromJs Fn# run)
  client,send
@-) reload =>

( @+m:: Pg =
  Pg .client
  {
    "page": "Summary" js,ws
    "rq": "clear" js,ws
  } map,from
  ( )
  client,send
@-) clear =>

( @+m:: # Pg# =
  Pg# .updateBtDiv { removeAll } [ "wait.gif" wg,img ] ui,$
  Pg# .client
  {
    "page": "Summary" js,ws
    "rq": "mkBackups" js,ws
  } map,from
  ( Rq# =
    chan,new : Ch =
    (
      Pg# .client
      {
        "page": "Summary" js,ws
        "rq": "mkBackups2" js,ws
        "tmp": Rq# .ftmp
      } map,from
      ( Ch chan,send)
      client,send
    ) Cb* =
    Cb* sys,go

    ( Rq = ;
      Rq map,size 0 ==
      ( 200 (Cb* sys,go) sys,delay)
      ( location,reload)
      elif
    ) Ch chan,recv
  )  client,send
@-) mkBackups. =>
