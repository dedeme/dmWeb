// Copyright 25-Dic-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Directory list row widget.

"../common/dirData" import
"../dm/wg" import

(@+mmllllll:: # ShowDir =
            ModifyPath =; DelPath =
            ModifyDir =; DelDir =
            ExecBk =
            Row# =; Pg# =

  map,new Wg# =

  Wg# "pg" Pg# map,put
  Wg# "row" Row# map,put

  (Wg# this,runEditRow.) wg,link {} [ ("edit" wg,img) ] ui,$+ : RowEdit =
  (Wg# this,runCancelRow.) wg,link {} [ ("editCancel" wg,img) ] ui,$+
    RowCancel =
  (Wg# ExecBk run) wg,link {} [ ("run" wg,img) ] ui,$+ : BkRun =

  (Wg# this,runIdEdit.) wg,link {} [ ("edit" wg,img) ] ui,$+ : IdEdit =
  (Wg# this,runEditRow.) wg,link {} [ ("editCancel" wg,img) ] ui,$+
    IdCancel =
  (Wg# DelDir run) wg,link {} [ ("delete" wg,img) ] ui,$+ : IdDel =
  (Wg# ModifyDir run) wg,link {} [ ("editOk" wg,img) ] ui,$+
    IdModify =
  "input" { style : "width:200px" } ui,$+ : IdInput =

  (Wg# this,runPtEdit.) wg,link {} [ ("edit" wg,img) ] ui,$+ : PtEdit =
  (Wg# this,runEditRow.) wg,link {} [ ("editCancel" wg,img) ] ui,$+
    PtCancel =
  (Wg# ModifyPath run) wg,link {} [ ("editOk" wg,img) ] ui,$+
    PtModify =
  (Wg# DelPath run) wg,link {} [ ("delete" wg,img) ] ui,$+ : PtDel =
  "input" { style : "width:300px" } ui,$+ : PtInput =

  (Wg# ShowDir run) wg,link {} [ ("view" wg,img) ] ui,$+ : ViewPr =


  Wg#
  "edit0" "span" ui,$+ : map,put+
  "exec" "span" ui,$+ : map,put+

  "id0" "span" ui,$+ : map,put+
  "id1" "span" ui,$+ : map,put+
  "id" "span" ui,$+ : map,put+

  "pt0" "span" ui,$+ : map,put+
  "pt1" "span" ui,$+ : map,put+
  "pt" "span" ui,$+ : map,put+

  "rowEdit" RowEdit map,put+
  "rowCancel" RowCancel map,put+
  "bkRun" BkRun map,put+

  "idEdit" IdEdit map,put+
  "idCancel" IdCancel map,put+
  "idDel" IdDel map,put+
  "idModify" IdModify map,put+
  "idInput" IdInput map,put+

  "ptEdit" PtEdit map,put+
  "ptCancel" PtCancel map,put+
  "ptModify" PtModify map,put+
  "ptDel" PtDel map,put+
  "ptInput" PtInput map,put+

  Row .state
  (
    dup .edit0 {removeAll} [ RowEdit ] ui,$
    dup .exec {removeAll} [
        (Row .dpath wrap,some? (BkRun) ("run" wg,lightImg) elif)
      ] ui,$

    dup .id0 { removeAll } [ ("edit" wg,lightImg) ] ui,$
    dup .id1 { removeAll } [ ("delete" wg,lightImg) ] ui,$
    dup .id { removeAll } [ "span" { text: (Row .id) } ] ui,$

    dup .pt0 { removeAll } [ ("edit" wg,lightImg) ] ui,$
    dup .pt1 {removeAll} [ ("delete" wg,lightImg) ] ui,$
    dup .pt {removeAll} [
        (
          Row .dpath
          ( p =; "span" { text: (p this,strCut.) } ui,$+)
          ( "hr" { style: "opacity:0.5" } ui,$+)
          wrap,option
        )
      ] ui,$

    "ok" "well" wg,img ui,$+ : map,put+
    "view" ViewPr : map,put+
  )
  (
    dup .edit0 {removeAll} [ ("edit" wg,lightImg) ] ui,$
    dup .exec {removeAll} [ ("run" wg,lightImg) ] ui,$

    dup .id0 { removeAll } [ ("edit" wg,lightImg) ] ui,$
    dup .id1 { removeAll } [ ("delete" wg,lightImg) ] ui,$
    dup .id { removeAll } [ "span" { text: (Row .id) } ] ui,$

    dup .pt0 {removeAll} [ ("edit" wg,lightImg) ] ui,$
    dup .pt1 {removeAll} [ ("delete" wg,lightImg) ] ui,$
    dup .pt {removeAll} [ "hr" { style: "opacity:0.5" } ] ui,$

    "ok" "warning" wg,img ui,$+ : map,put+
    "view" ViewPr : map,put+
  )
  elif

@-m) new =>

(@+m:: Wg =
  (
    "td" {
      style: `
        border-right: 1px solid rgb(110,130,150);
        border-left: 1px solid rgb(110,130,150);
        `
      } ui,$+
  ) sep =>

  "tr" {} [
    "td" {} [ (Wg .edit0) ]
    "td" {} [ (Wg .exec) ]
    (sep)
    "td" {} [ (Wg .id0) ]
    "td" {} [ (Wg .id1) ]
    "td" {style: "text-align:left;width:210px"} [ (Wg .id) ]
    (sep)
    "td" {} [ (Wg .pt0) ]
    "td" {} [ (Wg .pt1) ]
    "td" {style: "text-align:left;width:310px;white-space:nowrap;"} [
      (Wg .pt) ]
    (sep)
    "td" {} [ (Wg .ok) ]
    (sep)
    "td" {} [ (Wg .view) ]
  ] ui,$+
@-<Element>) widget =>

// Control ---------------------------------------------------------------------

( @+m:: Wg =
  Wg .row : Row =

  Wg .edit0 {removeAll} [ (Wg .rowCancel) ] ui,$
  Wg .exec {removeAll} [
      (Row .dpath wrap,some? (BkRun) ("run" wg,lightImg) elif)
    ] ui,$

  Wg .id0 {removeAll} [ (Wg .idEdit) ] ui,$
  Wg .id1 {removeAll} [
      (Row .dpath wrap,some? ("delete" wg,lightImg) (Wg .idDel) elif)
    ] ui,$
  Wg .id {removeAll} [ "span" { text: (Row .id) } ] ui,$

  Wg .pt0 {removeAll} [
      ( Row .empty : Row .dpath wrap,none? : ||
        (Wg .ptEdit)
        ("edit" wg,lightImg)
        elif
      )
    ] ui,$
  Wg .pt1 {removeAll} [
      (Row .empty (Wg .ptDel) ("delete" wg,lightImg) elif)
    ] ui,$
  Wg .pt {removeAll} [
      (
        Row .dpath
        (p =; "span" { text: (p this,strCut.) } ui,$+)
        ("hr" { style: "opacity:0.5" } ui,$+)
        wrap,option
      )
    ] ui,$
@-) runEditRow. =>

( @+m:: Wg =
  Wg .row : Row =

  Wg .edit0 {removeAll} [ (Wg .rowEdit) ] ui,$
  Wg .exec {removeAll} [
      (Row .dpath wrap,some? (BkRun) ("run" wg,lightImg) elif)
    ] ui,$

  Wg .id0 {removeAll} [ ("edit" wg,lightImg) ] ui,$
  Wg .id1 {removeAll} [ ("delete" wg,lightImg) ] ui,$
  Wg .id {removeAll} [ "span" { text: (Row .id) } ] ui,$

  Wg .pt0 {removeAll} [ ("edit" wg,lightImg) ] ui,$
  Wg .pt1 {removeAll} [ ("delete" wg,lightImg) ] ui,$
  Wg .pt {removeAll} [
      (
        Row .dpath
        (p =; "span" { text: (p this,strCut.) } ui,$+)
        ("hr" { style: "opacity:0.5" } ui,$+)
        wrap,option
      )
    ] ui,$
@-) runCancelRow. =>

( @+m:: Wg =
  Wg .row : Row =

  Wg .id0 {removeAll} [ ( Wg .idCancel) ] ui,$
  Wg .id1 {removeAll} [ ( Wg .idModify) ] ui,$
  Wg .id {removeAll} [ (Wg .idInput) ] ui,$

  Wg .idInput { value: (Row .id); focus } ui,$
@-) runIdEdit. =>

( @+m:: Wg =
  Wg .pt0 {removeAll} [ (Wg .ptCancel) ] ui,$
  Wg .pt1 {removeAll} [ (Wg .ptModify) ] ui,$
  Wg .pt {removeAll} [ (Wg .ptInput) ] ui,$

  Wg .row .dpath
  ( p =; Wg .ptInput { value: (p) } ui,$)
  ( Wg .ptInput { value: ""; focus } ui,$)
  wrap,option
@-) runPtEdit. =>


// Functions -------------------------------------------------------------------

( @+s:: s =
  s str,len 40 > ("..." s -37 str,right +) (s) elif
@-s) strCut. =>
