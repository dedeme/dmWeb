// Copyright 12-Jun-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Companies accounting charts.
module server.pgs.acc.companies;

load es.dm.std;
cgi = load es.dm.cgi;
json = load es.dm.json;
load es.dm.jsonM;
sync = load es.dm.sync;
cts = load data.cts;
acc = load data.acc;
qtable = load data.qtable;
manager = load data.manager;
fmodel = load data.flea.fmodel;
conf = load db.conf;
nicksTb = load db.nicksTb;
quotesDb = load db.quotesDb;
diariesDb = load db.acc.diariesDb;
serversTb = load db.serversTb;
dailyTb = load db.dailyTb;
managersTb = load db.managersTb;
load std;

{
  /// Request process.
  ///
  /// Arguments:
  ///   ck - Comunication key.
  ///   rq - Request.
  process ck rq
  is string -> hash<string, json.t> -> string =
    case cgi.rqString rq "rq" of
    "list" :
      var rp = [:];
      sync.run do lk:
        servers = serversTb.read lk |> array;
        {selected} = serversTb.historicList lk;
        sv = servers[selected];
        templateSv = (optGet sv.historicConf).url;
        codesSv = sv.codes;
        lsm = [:];
        nicks = nicksTb.selectedNicks lk;
        for nicks do nick:
          code = case find do e: e.nickId == nick.id done codesSv of
                 e::_ : case e.code of Some code : code; _ : nick.name esac;
                 _ : nick.name
                 esac;
          url = strReplace "${code}" code templateSv;
          lsm[nick.name] := [json.wb false, json.ws url] |> array;
          done;
        for [0..cts.managers - 1] do i:
          anns = diariesDb.readAnnotations lk i;
          {portfolio} = acc.settlement anns;
          for portfolio do e:
            if e.nick in lsm then
              v = lsm[e.nick];
              lsm[e.nick] := [json.wb true, v[1]] |> array
            fi
            done;
          done;
        var ls = [];
        forHash lsm do k v:
          ls := json.wa [json.ws k, v[0], v[1]]::ls
          done;
        rp["list"] := json.wa ls;
        done;
      cgi.rp ck rp;
    "nickData" :
      nick = cgi.rqString rq "nick";
      var rp = [:];
      sync.run do lk:
        var stocks = 0;
        var value = 0;
        for [0..cts.managers - 1] do i:
          anns = diariesDb.readAnnotations lk i;
          {portfolio} = acc.settlement anns;
          for portfolio do e:
            if e.nick == nick then
              stocks := stocks + e.stocks;
              value := value + e.stocks * e.price;
            fi
            done;
          done;
        price = if stocks == 0 then -1 else value / stocks fi;
        rp["price"] := json.wn price;
        rp["profits"] := json.wn 0;
        rp["dates"] := jswList json.ws (quotesDb.dates lk);
        case find do nk: nk.name == nick done (nicksTb.nicks lk) of
        nk::_ :
          nickId = nk.id;
          {activity} = conf.activity ();
          closes = quotesDb.closes lk;
          ocls = if activity != cts.actSleeping2
                 then
                   case find do e: e.nick == nickId done (dailyTb.read lk) of
                   e::_ : qtable.nickValuesAdd closes nick e.value;
                   _ : qtable.nickValues closes nick
                   esac
                 else
                   qtable.nickValues closes nick
                 fi;
          case ocls of
          Some cls :
            quotes = array [];
            for (cls is ~double[][]) do ce:
              e = array [];
              push e (json.wn ce[0]);
              for [1..cts.managers] do _: push e (json.wn (-1)) done;
              push quotes e
              done;
            for [0..cts.managers - 1] do i:
              man = (managersTb.read lk)[i];
              {model, params} = manager.getModel man nick;
              refs = fmodel.refs model cls params;
              for [0..length quotes - 1] do iq:
                quotes[iq][i + 1] := json.wn refs[iq]
                done
              done;
            rp["quotes"] := jswList do qs: json.wa (list qs) done (list quotes);
            if stocks > 0 then
              rp["profits"] := json.wn
                (stocks * (json.rn quotes[length quotes - 1][0] - price))
            fi;
          None () :
            rp["quotes"] := json.wa [];
          esac;
        _ :
          rp["quotes"] := json.wa [];
        esac;
        done;
      cgi.rp ck rp;
    k:
      failedKey k
    esac,
}
