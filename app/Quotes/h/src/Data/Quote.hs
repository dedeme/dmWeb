-- Copyright 30-Nov-2018 ÂºDeme
-- GNU General Public License - V3 <http://www.gnu.org/licenses/>

-- | Quote data

module Data.Quote (
  Quote (..),
  fromStr,
  toStr
  ) where

import Text.Printf

-- | Quote data
data Quote = Quote {
  date :: String,
  open :: Double,
  close :: Double,
  max :: Double,
  min :: Double,
  vol :: Int,
  error :: Bool
}

-- | @'fromStr' q@ - Returns a Quote from a String generated by 'toStr'
fromStr :: String -> Quote
fromStr q = let (d, (_:rest1)) = fspan q
                (o, (_:rest2)) = fspan rest1
                (c, (_:rest3)) = fspan rest2
                (mx, (_:rest4)) = fspan rest3
                (mn, (_:rest5)) = fspan rest4
                (v, (_:e)) = fspan rest5
            in  Quote {
                  date = d,
                  open = read o :: Double,
                  close = read c :: Double,
                  Data.Quote.max = read mx :: Double,
                  Data.Quote.min = read mn :: Double,
                  vol = read v :: Int,
                  Data.Quote.error = if e == "true" then True else False
                }
  where
  fspan = span (/= ':')

-- | @'toStr' q@ - Returns a serialization of 'q'
toStr :: Quote -> String
toStr (Quote d o c mx mn v e) =
  printf  "%s:%.4g:%.4g:%.4g:%.4g:%d:%s"
          d o c mx mn v (if e then "true" else "false")
