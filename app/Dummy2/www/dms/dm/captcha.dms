// Copyright 04-Nov-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

( counterLimit =; storeId =
  {
    "storeId": storeId
    "counterLimit": counterLimit
    "zeroColor": "#f0f0f0"
    "oneColor": "#c0c0c0"
    "checks": ([] data 8 (pop "input" {type: "checkbox"} ui,$ lst,push+) for)
    "value": "11110000"
  }
) new =>

( oneColor =; zeroColor =; Cp =
  Cp "oneColor" oneColor obj,set
  Cp "zeroColor" zeroColor obj,set
) setColors =>

( Cp =
  Cp "storeId" obj,get : storeId =
  storeId stk,show "_counter" + : counterKey =
  storeId "_time" + : timeKey =

  (
    counterKey "0" store,put
    timeKey : time,now toStr : store,put
    0
  ) reset =>

  counterKey store,take
  ( int,fromStr : c =
    timeKey store,take int,fromStr : t
    time,now t time,df : 900000 : > (reset) (c ) elif
  )
  ( reset)
  wrap,option
) counter =>

( Cp =
  Cp "storeId" obj,get : storeId =
  storeId  "_counter"  + : counterKey =
  storeId  "_time"  + : timeKey =

  counterKey : Cp this,counter 1 + toStr : store,put
  timeKey : time,now toStr : store,put
) incCounter =>

(
  Cp "storeId" obj,get : storeId =
  storeId  "_counter"  + : counterKey =
  storeId  "_time"  + : timeKey =

  counterKey : store,del
  timeKey : store,del
) resetCounter =>

( Cp =
  Cp "checks" obj,get ((checked) ui,prop toStr) lst,map : "" : str,join
  Cp "value" obj,get
  ==
) match =>

( Cp =
  [] data
  8
  ( i =;
    Cp "value" obj,get : i : str,get "1" ==
    ( Cp "oneColor" obj,get)
    ( Cp "zeroColor" obj,get)
    elif : back =
    Cp "checks" obj,get : i : get : Check =
    "td" { style: ("border: 1px solid;background-color: " back +) } [ Check ]
      ui,$ lst,push+
  )
  for lst,shuffle : Tds =

  "tr" {} [] data 4 (pop; Tds lst,pop : lst,push+) for ui,$ : Tr1
  "tr" {} [] data 4 (pop; Tds lst,pop : lst,push+) for ui,$ : Tr2

  "table" {
    att: "border" "0"
    style: "border: 1px solid;background-color: #fffff0"
  } [ Tr1 Tr2 ] ui,$
) wg =>
