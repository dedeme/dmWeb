// Copyright 11-Nov-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

"../dm/wg" import
"../dm/client" import
"../dm/file" import
"../dm/location" import

( @+m::
  "backups" : lst,new : map,put+
  "trash" : lst,new : map,put+

  "downloadFileName": "div" ui,$+ : map,put+
  "restoreInput": "input" { att: type "file", class: "frame" } ui,$+
    map,put+
  "restoreButtonDiv": "div" ui,$+ : map,put+
  "restoreBar": "div" {
      style: "text-align:left;width:200px;background-color:#cccccc"
      class: "frame"
    } [
      "div" { style: "background-color:#000080;width:0px;height:6px" }
    ] ui,$+
    map,put+
  "backList": "div" ui,$+ : map,put+
  "trashList": "div" ui,$+ : map,put+
@-m) new =>

// View

( @+m:: # Pg# =
  Pg# .view { removeAll } [
    "table" { style: "width:100%;text-align:center" } [
      "tr" {} [
        "td" { att: colspan "2" } [
          "div" { class: "head", html: ("<b>${\"Backups\":_}<b>") } ]]
      "tr" {} [
        "td" {
          style: "width:5px;white-space: nowrap;text-align:right"
          html: ("Download":_) }
        "td" {} [ "hr" ]]
      "tr" {} [
        "td" { att: colspan "2" } [
          "table" { att: align "center" } [
            "tr" {} [
              "td" { style : "width:250px" } [
                (Pg# .downloadFileName) ]]
            "tr" {} [
              "td" {} [
                "button" {
                style: "width: 150px"
                html: ("Make backup":_)
                on: { click: (Pg# this,backupDownload.) } }]]]]]
      "tr" {} [
        "td" {
          style: "width:5px;white-space: nowrap;text-align:right"
          html: ("Restore":_) }
        "td" {} [ "hr" ]]
      "tr" {} [
        "td" { att: colspan "2" } [
          "table" { att: align "center" } [
            "tr" {} [
              "td" { class: "frame" } [ (Pg# .restoreInput) ]]
            "tr" {} [
              "td" { att: align "center" } [
                (Pg# .restoreButtonDiv) {} [
                  "button" {
                    style: "width: 150px"
                    html: ("Restore backup":_)
                    on: {click: (Pg# this,backupRestore.) } }]]]]]]
      "tr" {} [ "td" { att: colspan "2" } [ "hr" ] ]
      "tr" {} [
        "td" { att: colspan "2" } [
          "table" { att: align "center" } [
            "tr" {} [
              "td" {} [
                "div" { class: "head", html: ("Automatic Backups":_) }]
              "td" { style: "width:25px" } []
              "td" {} [
                "div" { class: "head", html: ("Trash":_) } []
                ((Pg# this,clearTrash.) wg,link) {
                  class: "link"
                  html: (" [ " "Clear":_ " ]" + +)
                } ]]
            "tr" {} [
              "td" { class: "frame", style: "vertical-align:top" } [
                (Pg# .backList) ]
              "td" {} []
              "td" { class: "frame", style: "vertical-align:top" } [
                (Pg# .trashList) ]]]]]
  ]]
  ui,$
  Pg# this,update.
@-) show =>

( @+<Element>ll:: # fn# =>; Ls =; Wg =
  "table"
  { class: "main" }
  Ls (<) lst,sort; Ls
  (@s:: e =
    "tr" {} [
      "td" {style: "align:center"} [
        ((e fn#) wg,link) { class: "link", html (e -4 str,left) } ]]
    ui,$+
  ) lst,map
  ui,$+ : Table =
  Wg { removeAll } [ Table ] ui,$
@-) fillList. =>

( @+ii:: ix =; total =
  ix 100. * total / float,round float,toInt toStr : width =
  "div" {
    style: ("background-color:#000080;width:${width}%;height:6px")
  } ui,$+
@-<Element>) progress. =>

( @+m:: Pg =
  Pg .restoreButtonDiv { removeAll } [ (Pg .restoreBar) ] ui,$
@-) startProgress. =>

( @+mii:: ix =; total =; Pg =
  Pg .restoreBar { removeAll } [ (total ix this,progress.) ] ui,$
@-) appendProgress. =>

( @+m:: Pg =
  Pg .restoreBar { removeAll } [ (1 1 this,progress.) ] ui,$
@-) endProgress. =>

// Control ---------------------------------------------------------------------

( @+m:: # Pg# =

  ( @+ss:: rq =; f =
    "All the data will be replaced":_ sys,confirm?
    (
      Pg# .client
      {
        "page": "Backups" js,ws
        "rq": rq js,ws
        "file": f js,ws
      } map,from
      ( "" location,assign)
      client,send
    )
    if
  @-) fn# =>

  Pg# .client
  {
    "page": "Backups" js,ws
    "rq": "lists" js,ws
  } map,from
  ( @+m:: Rp =
    Pg# .backList : Rp .backups (js,rs) lst,fromJs : (
      "autorestore" fn#
    ) this,fillList.
    Pg# .trashList : Rp .trash (js,rs) lst,fromJs : (
      "restoreTrash" fn#
    ) this,fillList.
  @-)
  client,send
@-) update. =>

( @+m:: # Pg# =
  Pg# .downloadFileName { removeAll } [ ("wait.gif" wg,img) ] ui,$

  Pg# .client
  {
    "page": "Backups" js,ws
    "rq": "backup" js,ws
  } map,from
  ( @+m:: .name js,rs : fileName =
    Pg# .downloadFileName {
      html: ("<a href='tmp/" fileName "'>backup.zip</a>" + +)
    } ui,$
  @-)
  client,send
@-) backupDownload. =>

( @+m:: # Pg# =

  Pg# .restoreInput file,inputSize
  (
    Pg# .restoreInput 0 file,inputGet : F# =
    F# file,size : fileSize# =
    0 wrap,ref : FileRead# =

    fileSize#
    (
      "All the data will be replaced":_ sys,confirm?
      (
        F#
        ( @+l<File>:: null =; Ch =
          Pg# this,startProgress.

          Pg# .client
          {
            "page": "Backups" js,ws
            "rq": "restoreStart" js,ws
          } map,from
          ( null =)
          client,send

          "" Ch chan,send
        @-)
        ( @+l<Blob>:: Bs =; Ch =
          FileRead# >> : ix =
          FileRead# : ix Bs blob,size + : <<
          Pg# ix fileSize# this,appendProgress.

          Pg# .client
          {
            "page": "Backups" js,ws
            "rq": "restoreAppend" js,ws
            "data": Bs b64,encodeBytes js,ws
          } map,from
          ( null =)
          client,send

          "" Ch chan,send
        @-)
        (
          Pg# this,endProgress.

          Pg# .client
          {
            "page": "Backups" js,ws
            "rq": "restoreEnd" js,ws
          } map,from
          ( @m .fail : f =
            (f "wrong" ==)
            (
              "Backup version is wrong" sys,alert
              Pg# this,new this,show
            )
            else
            (f "missing" ==)
            (
              "Backup version is missing" sys,alert
              Pg# this,new this,show
            )
            else
            ( "" location,assign)
            if
          )
          client,send
        )
        (
          "'%0' can not be read":_ (F# file,name) __ sys,alert
          Pg# .client
          {
            "page": "Backups" js,ws
            "rq": "restoreAbort" js,ws
          } map,from
          ( null =
            Pg# this,new this,show
          )
          client,send
        )
        25000
          file,read
      )
      if
    )
    ("'%0' is an empty file":_ (F# file,name) __ sys,alert)
    elif
  )
  ( "Backup file is missing":_ sys,alert)
  elif
@-) backupRestore. =>

( @+m:: # Pg# =
  "Clear trash?":_ sys,confirm?
  (
    Pg# .client
    {
      "page": "Backups" js,ws
      "rq": "clearTrash" js,ws
    } map,from
    ( Pg# this,new this,show )
    client,send
  )
  if
@-) clearTrash. =>
