// Copyright 25-Sep-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

"i18n" import
"dm/cgi" import
"conf" import
"pages/main" import
"pages/settings" import
"pages/chpass" import
"pages/backups" import

(i18n._) : _ =>
(i18n.__) : __ =>

"Dummy2" appName =
"201909" dataVersion =
"dmcgi/Dummy2" appDir =
3600 expiration =
appName : "\nData version: " : dataVersion : "\n" + + + version =

( @+
  (fname = cgi,home fname path,+ file,mkdir)
  mkdir =>

  cgi,home "data" path,+
  dir =
  dir file,exists? !
  (
    dir file,mkdir

    dir "version.txt" path,+ version file,write

    "tmp" mkdir
    "trash" mkdir
    "backups" mkdir
  )
  if
@-) appInit =>

( @+sm:: Rq =; sessionId =
   Rq "page" map,has? ! ("Field 'page' is missing" fail) if
  Rq .page js,rs : page =

  ( page "Main" ==)
  ( Rq main,process)
  else
  ( page "logout" ==)
  (
    sessionId cgi,delSession; pop
    Rq "rq" "logout" js,ws map,put
    Rq appName version backups,process  // Add automatic backup
  )
  else
  (page "Settings" ==)
  (Rq settings,process)
  else
  (page "Chpass" ==)
  (Rq chpass,process)
  else
  (page "Backups" ==)
  (Rq appName version backups,process)
  else
  ( "Value '" page "' not allowed for 'page'" + + fail)
  if
@-s) process =>

// Start ---------------------------------------------------------------------

appDir expiration cgi,init
appInit
conf,init


sys,args !0 rq =
rq ":" str,index ix =

( ix -1 ==) //...................................................... CONNECTION
(
  rq cgi,setKey
  rq cgi,connect sys,print
)
else
(ix 0 ==) //................................................... AUTHENTICATION
(
  appName cgi,klen cryp,key : key =
  key cgi,setKey
  rq 1 str,right key cryp,decryp : ":" : str,split : Fields =

  Fields !0 : Fields !1 : Fields !2 "1" == : cgi,authentication
    sys,print
)
else //........................................................... NORMAL DATA
(
  rq ix str,left : sessionId =
  rq ix 1 + str,right : crypData =

  sessionId cgi,getSession
  ( Ss =
    Ss .key js,rs : key =
    Ss .connectionId js,rs : connectionId =

    key cgi,setKey
    crypData key cryp,decryp : js,ro : Rq =

    Rq "connectionId" map,has?
    ( Rq .connectionId js,rs : connectionId : == (0) (1) elif)
    ( 0)
    elif

    ( "nosession" cgi,setKey; cgi,expired sys,print)
    ( sessionId Rq process sys,print)
    elif
  )
  ( "nosession" cgi,setKey; cgi,expired sys,print)
  wrap,option
)
if

empty? assert
