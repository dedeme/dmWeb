// Copyright 22-Jan-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[Order *].

#ifndef DATA_ORDER_AORDER_H
  #define DATA_ORDER_AORDER_H

#include "dmc/Arr.h"
#include "data/Order/OOrder.h"

#include "data/Order.h"

/// Arr[Order *].
struct aOrder_AOrder {
  Order **es; // Start elements.
  Order **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  Order **endbf; // End buffer.
};

/// Arr[Order *].
typedef struct aOrder_AOrder AOrder;

/// Creates a new Array with buffer size of 15 elements.
AOrder *aOrder_new (void);

/// 'buffer' must be > 0.
AOrder *aOrder_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AOrder *aOrder_new_from (Order *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AOrder *aOrder_new_c (int size, Order **es);

/// Returns a new array with elements of 'this'.
AOrder *aOrder_copy (AOrder *this);

///
int aOrder_size (AOrder *this);

/// Resturn the element at position ix.
Order *aOrder_get (AOrder *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aOrder_push (AOrder *this, Order *e);

/// Returns and removes the last element.
Order *aOrder_pop (AOrder *this);

/// Returns the las element.
Order *aOrder_peek (AOrder *this);

/// Sets the element at position ix.
void aOrder_set (AOrder *this, int ix, Order *e);

/// Inserts an element at position ix.
void aOrder_insert (AOrder *this, int ix, Order *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aOrder_remove (AOrder *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aOrder_cat (AOrder *this, AOrder *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aOrder_insert_arr (AOrder *this, int ix, AOrder *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aOrder_remove_range (AOrder *this, int begin, int end);

/// Removes every element of 'this'.
void aOrder_clear (AOrder *this);

/// Reverses elements of 'this'.
void aOrder_reverse (AOrder *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aOrder_sort (AOrder *this, int (*greater)(Order *e1, Order *e2));

/// aOrder_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aOrder_shuffle (AOrder *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aOrder_all (AOrder *this, int (*pred)(Order *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aOrder_any (AOrder *this, int (*pred)(Order *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOrder_index (AOrder *this, int (*pred)(Order *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aOrder_last_index (AOrder *this, int (*pred)(Order *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OOrder *aOrder_find(AOrder *this, int (*pred)(Order *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OOrder *aOrder_find_last(AOrder *this, int (*pred)(Order *e));

/// aOrder_filter_in removes every element which returns '0' with 'pred'.
void aOrder_filter_in (AOrder *this, int (*pred)(Order *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AOrder *aOrder_take (AOrder *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AOrder *aOrder_takef (AOrder *this, int (*predicate)(Order *e));

/// Returns a new Arr with elements left after aOrder_take.
AOrder *aOrder_drop (AOrder *this, int n);

/// Returns a new Arr with elements left after aOrder_takef.
AOrder *aOrder_dropf (AOrder *this, int (*predicate)(Order *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AOrder *aOrder_filter_to (AOrder *this, int (*predicate)(Order *e));

/// Returns a new Arr with elements generated by converter.
Arr *aOrder_map (AOrder *this, void *(*converter)(Order *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aOrder_map2 (AOrder *this, void *(*conv1)(Order *e), void *(*conv2)(Order *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aOrder_zip (AOrder *a1, AOrder *a2, void *(*converter)(Order *e1, Order *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aOrder_zip3 (
  AOrder *a1, AOrder *a2, AOrder *a3,
  void *(*conveter)(Order*e1, Order*e2, Order*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AOrder *aOrder_duplicates (AOrder *this, int (feq)(Order *e1, Order *e2));

/// Returns this JSONized.
///   this: Container.
char *aOrder_to_js (AOrder *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AOrder *aOrder_from_js (char *js);


//--// Not remove

#endif