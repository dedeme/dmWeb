// Copyright 16-Jan-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[Model *].

#ifndef DATA_MODEL_AMODEL_H
  #define DATA_MODEL_AMODEL_H

#include "dmc/Arr.h"
#include "data/Model/OModel.h"

#include "data/Model.h"

/// Arr[Model *].
struct aModel_AModel {
  Model **es; // Start elements.
  Model **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  Model **endbf; // End buffer.
};

/// Arr[Model *].
typedef struct aModel_AModel AModel;

/// Creates a new Array with buffer size of 15 elements.
AModel *aModel_new (void);

/// 'buffer' must be > 0.
AModel *aModel_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AModel *aModel_new_from (Model *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AModel *aModel_new_c (int size, Model **es);

/// Returns a new array with elements of 'this'.
AModel *aModel_copy (AModel *this);

///
int aModel_size (AModel *this);

/// Resturn the element at position ix.
Model *aModel_get (AModel *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aModel_push (AModel *this, Model *e);

/// Returns and removes the last element.
Model *aModel_pop (AModel *this);

/// Returns the las element.
Model *aModel_peek (AModel *this);

/// Sets the element at position ix.
void aModel_set (AModel *this, int ix, Model *e);

/// Inserts an element at position ix.
void aModel_insert (AModel *this, int ix, Model *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aModel_remove (AModel *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aModel_cat (AModel *this, AModel *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aModel_insert_arr (AModel *this, int ix, AModel *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aModel_remove_range (AModel *this, int begin, int end);

/// Removes every element of 'this'.
void aModel_clear (AModel *this);

/// Reverses elements of 'this'.
void aModel_reverse (AModel *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aModel_sort (AModel *this, int (*greater)(Model *e1, Model *e2));

/// aModel_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aModel_shuffle (AModel *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aModel_all (AModel *this, int (*pred)(Model *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aModel_any (AModel *this, int (*pred)(Model *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aModel_index (AModel *this, int (*pred)(Model *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aModel_last_index (AModel *this, int (*pred)(Model *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OModel *aModel_find(AModel *this, int (*pred)(Model *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OModel *aModel_find_last(AModel *this, int (*pred)(Model *e));

/// aModel_filter_in removes every element which returns '0' with 'pred'.
void aModel_filter_in (AModel *this, int (*pred)(Model *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AModel *aModel_take (AModel *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AModel *aModel_takef (AModel *this, int (*predicate)(Model *e));

/// Returns a new Arr with elements left after aModel_take.
AModel *aModel_drop (AModel *this, int n);

/// Returns a new Arr with elements left after aModel_takef.
AModel *aModel_dropf (AModel *this, int (*predicate)(Model *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AModel *aModel_filter_to (AModel *this, int (*predicate)(Model *e));

/// Returns a new Arr with elements generated by converter.
Arr *aModel_map (AModel *this, void *(*converter)(Model *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aModel_map2 (AModel *this, void *(*conv1)(Model *e), void *(*conv2)(Model *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aModel_zip (AModel *a1, AModel *a2, void *(*converter)(Model *e1, Model *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aModel_zip3 (
  AModel *a1, AModel *a2, AModel *a3,
  void *(*conveter)(Model*e1, Model*e2, Model*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AModel *aModel_duplicates (AModel *this, int (feq)(Model *e1, Model *e2));

/// Returns this JSONized.
///   this: Container.
char *aModel_to_js (AModel *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AModel *aModel_from_js (char *js);


//--// Not remove

#endif