// Copyright 17-Jan-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[ModelEval *].

#ifndef DATA_EVAL_MODELEVAL_AMODELEVAL_H
  #define DATA_EVAL_MODELEVAL_AMODELEVAL_H

#include "dmc/Arr.h"
#include "data/eval/ModelEval/OModelEval.h"

#include "data/eval/ModelEval.h"

/// Arr[ModelEval *].
struct aModelEval_AModelEval {
  ModelEval **es; // Start elements.
  ModelEval **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  ModelEval **endbf; // End buffer.
};

/// Arr[ModelEval *].
typedef struct aModelEval_AModelEval AModelEval;

/// Creates a new Array with buffer size of 15 elements.
AModelEval *aModelEval_new (void);

/// 'buffer' must be > 0.
AModelEval *aModelEval_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AModelEval *aModelEval_new_from (ModelEval *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AModelEval *aModelEval_new_c (int size, ModelEval **es);

/// Returns a new array with elements of 'this'.
AModelEval *aModelEval_copy (AModelEval *this);

///
int aModelEval_size (AModelEval *this);

/// Resturn the element at position ix.
ModelEval *aModelEval_get (AModelEval *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aModelEval_push (AModelEval *this, ModelEval *e);

/// Returns and removes the last element.
ModelEval *aModelEval_pop (AModelEval *this);

/// Returns the las element.
ModelEval *aModelEval_peek (AModelEval *this);

/// Sets the element at position ix.
void aModelEval_set (AModelEval *this, int ix, ModelEval *e);

/// Inserts an element at position ix.
void aModelEval_insert (AModelEval *this, int ix, ModelEval *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aModelEval_remove (AModelEval *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aModelEval_cat (AModelEval *this, AModelEval *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aModelEval_insert_arr (AModelEval *this, int ix, AModelEval *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aModelEval_remove_range (AModelEval *this, int begin, int end);

/// Removes every element of 'this'.
void aModelEval_clear (AModelEval *this);

/// Reverses elements of 'this'.
void aModelEval_reverse (AModelEval *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aModelEval_sort (AModelEval *this, int (*greater)(ModelEval *e1, ModelEval *e2));

/// aModelEval_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aModelEval_shuffle (AModelEval *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aModelEval_all (AModelEval *this, int (*pred)(ModelEval *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aModelEval_any (AModelEval *this, int (*pred)(ModelEval *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aModelEval_index (AModelEval *this, int (*pred)(ModelEval *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aModelEval_last_index (AModelEval *this, int (*pred)(ModelEval *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OModelEval *aModelEval_find(AModelEval *this, int (*pred)(ModelEval *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OModelEval *aModelEval_find_last(AModelEval *this, int (*pred)(ModelEval *e));

/// aModelEval_filter_in removes every element which returns '0' with 'pred'.
void aModelEval_filter_in (AModelEval *this, int (*pred)(ModelEval *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AModelEval *aModelEval_take (AModelEval *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AModelEval *aModelEval_takef (AModelEval *this, int (*predicate)(ModelEval *e));

/// Returns a new Arr with elements left after aModelEval_take.
AModelEval *aModelEval_drop (AModelEval *this, int n);

/// Returns a new Arr with elements left after aModelEval_takef.
AModelEval *aModelEval_dropf (AModelEval *this, int (*predicate)(ModelEval *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AModelEval *aModelEval_filter_to (AModelEval *this, int (*predicate)(ModelEval *e));

/// Returns a new Arr with elements generated by converter.
Arr *aModelEval_map (AModelEval *this, void *(*converter)(ModelEval *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aModelEval_map2 (AModelEval *this, void *(*conv1)(ModelEval *e), void *(*conv2)(ModelEval *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aModelEval_zip (AModelEval *a1, AModelEval *a2, void *(*converter)(ModelEval *e1, ModelEval *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aModelEval_zip3 (
  AModelEval *a1, AModelEval *a2, AModelEval *a3,
  void *(*conveter)(ModelEval*e1, ModelEval*e2, ModelEval*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AModelEval *aModelEval_duplicates (AModelEval *this, int (feq)(ModelEval *e1, ModelEval *e2));

/// Returns this JSONized.
///   this: Container.
char *aModelEval_to_js (AModelEval *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AModelEval *aModelEval_from_js (char *js);


//--// Not remove

#endif