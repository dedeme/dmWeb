// Copyright 16-Jan-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Arr[ADouble *].

#ifndef DATA_ADOUBLE_AADOUBLE_H
  #define DATA_ADOUBLE_AADOUBLE_H

#include "dmc/Arr.h"
#include "data/ADouble/OADouble.h"

#include "dmc/ADouble.h"

/// Arr[ADouble *].
struct aADouble_AADouble {
  ADouble **es; // Start elements.
  ADouble **end; // End elements. (Elements are between 'es' (inclusive) and 'end'
              // exclusive.
  ADouble **endbf; // End buffer.
};

/// Arr[ADouble *].
typedef struct aADouble_AADouble AADouble;

/// Creates a new Array with buffer size of 15 elements.
AADouble *aADouble_new (void);

/// 'buffer' must be > 0.
AADouble *aADouble_bf_new (int buffer);

/// Creates a new array from several elements.
/// Elements list must finish with NULL.
AADouble *aADouble_new_from (ADouble *e, ...);

/// Creates a new array from a C array. For example:
///   Arr *a = arr_new_c(3, (void *[]){"c", "d", "e"});
/// If 'size' is less than C array length, result is ok (only will be
/// used 'size' first elements); but if 'size' is greater, the result is
/// undetermined.
AADouble *aADouble_new_c (int size, ADouble **es);

/// Returns a new array with elements of 'this'.
AADouble *aADouble_copy (AADouble *this);

///
int aADouble_size (AADouble *this);

/// Resturn the element at position ix.
ADouble *aADouble_get (AADouble *this, int ix);

/// Adds an element at the end of 'this'. 'e' will be freed by 'this'.
void aADouble_push (AADouble *this, ADouble *e);

/// Returns and removes the last element.
ADouble *aADouble_pop (AADouble *this);

/// Returns the las element.
ADouble *aADouble_peek (AADouble *this);

/// Sets the element at position ix.
void aADouble_set (AADouble *this, int ix, ADouble *e);

/// Inserts an element at position ix.
void aADouble_insert (AADouble *this, int ix, ADouble *e);

/// Removes an element at position ix. Buffer size of 'this' does not change.
void aADouble_remove (AADouble *this, int ix);

/// Adds pointer to elements of 'other' to 'this'.
void aADouble_cat (AADouble *this, AADouble *other);

/// Inserts pointer to elements of 'other' at 'ix'
void aADouble_insert_arr (AADouble *this, int ix, AADouble *other);

/// Removes elements between [begin-end). Buffer size of 'this' does not change.
void aADouble_remove_range (AADouble *this, int begin, int end);

/// Removes every element of 'this'.
void aADouble_clear (AADouble *this);

/// Reverses elements of 'this'.
void aADouble_reverse (AADouble *this);

/// Sorts 'this' ascendantly using the function 'greater' that returns '1'
/// if 'e1' > 'e2'.
void aADouble_sort (AADouble *this, int (*greater)(ADouble *e1, ADouble *e2));

/// aADouble_shuflle remix 'this' elements. It should be used after calling
/// rnd_init() or sys_init().
void aADouble_shuffle (AADouble *this);

/// Returns '1' if every element of 'this' yields '1' with 'pred'.
int aADouble_all (AADouble *this, int (*pred)(ADouble *e));

/// Returns '1' if some element of 'this' yields '1' with 'pred'.
int aADouble_any (AADouble *this, int (*pred)(ADouble *e));

/// Returns the index of the first elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aADouble_index (AADouble *this, int (*pred)(ADouble *e));

/// Returns the index of the last elements which returns '1'
/// with 'pred', or -1 if such element does not exist.
int aADouble_last_index (AADouble *this, int (*pred)(ADouble *e));

/// Returns the first element which pruduces '1' with 'pred' or 'tp_none'.
OADouble *aADouble_find(AADouble *this, int (*pred)(ADouble *e));

/// Returns the last element which pruduces '1' with 'pred' or 'tp_none'.
OADouble *aADouble_find_last(AADouble *this, int (*pred)(ADouble *e));

/// aADouble_filter_in removes every element which returns '0' with 'pred'.
void aADouble_filter_in (AADouble *this, int (*pred)(ADouble *e));

/// Returns a new Arr with the n first elements of this.
/// If this has less elements than n, returs a copy of this.
AADouble *aADouble_take (AADouble *this, int n);

/// Returns a new Arr with the first elements which return '1' with 'predicate'.
AADouble *aADouble_takef (AADouble *this, int (*predicate)(ADouble *e));

/// Returns a new Arr with elements left after aADouble_take.
AADouble *aADouble_drop (AADouble *this, int n);

/// Returns a new Arr with elements left after aADouble_takef.
AADouble *aADouble_dropf (AADouble *this, int (*predicate)(ADouble *e));

/// Returns a new Arr with every element which returns '1' with 'pred'.
AADouble *aADouble_filter_to (AADouble *this, int (*predicate)(ADouble *e));

/// Returns a new Arr with elements generated by converter.
Arr *aADouble_map (AADouble *this, void *(*converter)(ADouble *e));

/// Returns a new Arr whit the first element generated by conv1 and the rest
/// by conv2.
Arr *aADouble_map2 (AADouble *this, void *(*conv1)(ADouble *e), void *(*conv2)(ADouble *e));

/// Returns a new Arr mixing values of 'a1' and 'a2'. The size of the resultant
/// array is the less of 'a1' size and 'a2' size.
Arr *aADouble_zip (AADouble *a1, AADouble *a2, void *(*converter)(ADouble *e1, ADouble *e2));

/// Returns a new Arr mixing values of 'a1', 'a2' and 'a3'. The size of the
/// resultant array is the less of 'a1' size, 'a2' size and 'a3' size.
Arr *aADouble_zip3 (
  AADouble *a1, AADouble *a2, AADouble *a3,
  void *(*conveter)(ADouble*e1, ADouble*e2, ADouble*e3)
);

/// Removes duplicates with function 'feq=1' and returns them in a new array.
/// It returns only the first duplicated element.
AADouble *aADouble_duplicates (AADouble *this, int (feq)(ADouble *e1, ADouble *e2));

/// Returns this JSONized.
///   this: Container.
char *aADouble_to_js (AADouble *this);

/// Returns the container from its JSON representation.
///   js  : Container JSONized.
AADouble *aADouble_from_js (char *js);


//--// Not remove

#endif