// Copyright 26-Apr-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Nicks page.
module server.pgs.settings.nicks;

cgi = load es.dm.cgi;
json = load es.dm.json;
load es.dm.jsonM;
sync = load es.dm.sync;
load std;
nick = load data.nick;
nicksTb = load db.nicksTb;
quotesDb = load db.quotesDb;
serversTb = load db.serversTb;

{
  /// Request process.
  ///
  /// Arguments:
  ///   ck - Comunication key.
  ///   rq - Request.
  process ck rq
  is string -> hash<string, json.t> -> string =
    case cgi.rqString rq "rq" of
    "idata" :
      rp = [:];
      sync.run do lk:
        { model, lst } = nicksTb.data lk;
        rp["model"] := json.wn model;
        rp["nicks"] := jswList nick.toJs lst;
        rp["volumes"] := jswHash json.wn (quotesDb.volumes lk lst);
        done;
      cgi.rp ck rp;
    "add" :
      nickName = cgi.rqString rq "nickName";
      rp = [:];
      sync.run do lk:
        {nickId, ok} = nicksTb.add lk nickName;
        var ok' = ok;
        if ok' then
          ok' := quotesDb.addNick lk nickName;
          serversTb.addNick lk nickId
        fi;
        rp["ok"] := json.wb ok';
        done;
      cgi.rp ck rp;
    "del" :
      id = cgi.rqNumber rq "id";
      sync.run do lk:
        case nicksTb.getNick lk id of
        Some nk : quotesDb.delNick lk nk.name;
        None () : ()
        esac;
        nicksTb.del lk id;
        serversTb.delNick lk id
        done;
      cgi.rpEmpty ck;
    "setIsSel" :
      id = cgi.rqNumber rq "id";
      value = cgi.rqBoolean rq "value";
      sync.run do lk:
        nicksTb.setIsSel lk id value;
        done;
      cgi.rpEmpty ck;
    "setModel" :
      id = cgi.rqNumber rq "id";
      sync.run do lk:
        nicksTb.setModel lk id;
        done;
      cgi.rpEmpty ck;
    k :
      failedKey k
    esac,
}