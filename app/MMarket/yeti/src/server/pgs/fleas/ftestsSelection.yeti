// Copyright 21-May-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Fleas tests selection page.
module server.pgs.fleas.ftestsSelection;

cgi = load es.dm.cgi;
json = load es.dm.json;
load es.dm.jsonM;
sync = load es.dm.sync;
thread = load es.dm.thread;
load std;
log = load db.log;
quotesDb = load db.quotesDb;
flog = load db.fleas.flog;
fmodels = load data.flea.fmodels;
fleas = load scheduler.fleas;

{
  /// Request process.
  ///
  /// Arguments:
  ///   ck - Comunication key.
  ///   rq - Request.
  process ck rq
  is string -> hash<string, json.t> -> string =
    case cgi.rqString rq "rq" of
    "logId" :
      rp = [:];
      rp["logId"] := json.ws (flog.newId ());
      cgi.rp ck rp;
    "start" :
      modelId = cgi.rqString rq "modelId";
      logId = cgi.rqString rq "logId";
      rp = [:];
      sync.run do lk:
        case fmodels.getModel modelId of
        Some md :
          if flog.check logId then
            opens = quotesDb.opens lk;
            closes = quotesDb.closes lk;
            _ = thread.run do:
              _ = fleas.selection opens closes md (Some logId);
              done;
            rp["ok"] := json.wb true
          else
            log.error lk "Fleas log idendifier is not valid";
            rp["ok"] := json.wb false
          fi;
        None () :
          log.error lk "Model \(modelId) not found";
          rp["ok"] := json.wb true
        esac
        done;
      cgi.rp ck rp;
    "continue" :
      logId = cgi.rqString rq "logId";
      cgi.rp ck ["log": jswMaybe id (flog.read logId)];
    "stop" :
      logId = cgi.rqString rq "logId";
      flog.info logId "Stopped.";
      flog.stop logId;
      cgi.rpEmpty ck;
    k:
      failedKey k
    esac,
}
