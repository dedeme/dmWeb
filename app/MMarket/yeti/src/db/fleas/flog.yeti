// Copyright 21-May-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Fleas log.
module db.fleas.flog;

load es.dm.std;
file = load es.dm.file;
date = load es.dm.date;
json = load es.dm.json;
logRow = load data.logRow;

(
  var path = "";
  var fid = "";

{
  /// Initializes configuration table.
  ///
  /// Arguments:
  ///   parent - Parent directory.
  init parent
  is string -> () =
    path := parent ^/ "Flog.tb";
    if not file.exists? path then
      file.writeAll path (json.wa [] |> json.toStr)
    fi,

  /// Resets flog (Delete its contents), generates a new id and returns it.
  newId ()
  is () -> string =
    file.writeAll path (json.wa [] |> json.toStr);
    fid := date.now () |> date.toTime |> string;
    fid,

  /// Returns 'true' if "id" is correct.
  ///
  /// Arguments:
  ///   id - log control identifier.
  check id
  is string -> boolean =
    id != "" and id == fid,

  /// Stops flog.
  ///
  /// Arguments:
  ///   id - Log control identifier. If 'id' is outdated this function do
  ///        nothing.
  stop id
  is string -> () =
    if id != "" and id == fid then fid := "" fi,


  /// Adds a normal message.
  ///
  ///  If "id" is outdated, this function do nothing.
  /// Arguments:
  ///   id - Log control identifier. If 'id' is outdated this function do
  ///        nothing.
  ///   msg - Message to show.
  info id msg
  is string -> string -> () =
    if id != "" and id == fid then
      es = file.readAll path |> json.fromStr |> json.ra;
      es = logRow.toJs (logRow.info msg) :: es;
      file.writeAll path (es |> json.wa |> json.toStr)
    fi,

  /// Reads Log and returns an 'JSONized' Arr[logRow.T]
  ///
  /// Order is after to before.
  ///
  /// If "id" is outdated returns 'None ()'.
  ///
  /// Arguments:
  ///   id - Log control identifier.
  read id
  is string -> option<json.t> =
    if id != "" and id == fid then
      file.readAll path |> json.fromStr |> Some
    else
      None ()
    fi,
})