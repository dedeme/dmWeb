// Copyright 28-Apr-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Servers table
module db.serversTb;

load es.dm.std;
json = load es.dm.json;
load es.dm.jsonM;
sync = load es.dm.sync;
file = load es.dm.file;
server = load data.server;
cts = load data.cts;

typedef t =
  { nextId is number,
    lst is list<server.t>
  };

(
  toJs s =
    json.wa
      [ json.wn s.nextId,
        jswList server.toJs s.lst
      ];

  fromJs js =
    ( a = array (json.ra js);
      { nextId = json.rn a[0],
        lst = jsrList server.fromJs a[1]
      }
    );

  var path = "";

  write lk data =
    file.writeAll path (toJs data |> json.toStr);

  read' lk =
    file.readAll path |> json.fromStr |> fromJs;

  confList lk isHistoric?
  is sync.t -> boolean -> { servers is array<server.t>, selected is number } =
    ( { svs, sel = selected, ix} = fold do {svs, sel, ix} sv:
        case if isHistoric? then sv.historicConf else sv.dailyConf fi of
        Some conf :
          if conf.sel == cts.serverStopped then
            { svs, sel, ix = ix + 1 }
          else
            { svs = sv::svs,
              sel = if conf.sel == cts.serverSelected then ix else sel fi,
              ix = ix + 1
            }
          fi;
        None () :
          { svs, sel, ix = ix + 1 }
        esac
        done { svs = [], sel = 0, ix = 0 } (read' lk).lst;
      { servers = array svs, selected}
    );

{
  /// Initializes configuration table.
  ///
  /// Arguments:
  ///   parent - Parent directory.
  init parent
  is string -> () =
    path := parent ^/ "Servers.tb";
    if not file.exists? path
    then
      sync.run do lk:
        write lk
          { nextId = 0,
            lst = []
          }
        done
    fi,

  /// Returns server list in JSON format.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  readJs lk
  is sync.t -> json.t =
    file.readAll path |> json.fromStr |> json.ra |> tail |> head,

  /// Returns server list.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  read lk
  is sync.t -> list<server.t> =
    (read' lk).lst,

  /// Adds a new server. If shortName is duplicated, it returns 'false'.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  ///   shortName - Server short name.
  add lk shortName
  is sync.t -> string -> boolean =
    data = read' lk;
    if any do sv: sv.shortName == shortName done data.lst then
      false
    else
      id = data.nextId;
      write lk { nextId = id + 1, lst = server.mk id shortName::data.lst };
      true
    fi,

  /// Modify data of "server".
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  ///   server - Server to modify.
  modify lk server
  is sync.t -> server.t -> boolean =
    data = read' lk;
    var ok = false;
    lst = map do sv:
                if sv.id == server.id then
                  ok := true;
                  server
                else
                  sv
                fi
                done data.lst;
    write lk { nextId = data.nextId, lst };
    ok,

  /// Deletes a server.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  ///   id - Server identifier.
  del lk id
  is sync.t -> number -> () =
    data = read' lk;
    lst = filter do sv: sv.id != id done data.lst;
    write lk { nextId = data.nextId, lst },

  /// Adds a new nick.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  ///   nickId - Identifier of nick to add.
  addNick lk nickId
  is sync.t -> number -> () =
    update codes =
      if any do c: c.nickId == nickId done codes then codes
      else { code = None (), nickId } :: codes
      fi;
    //---
    data = read' lk;
    lst = map do sv: sv with { codes = update sv.codes } done data.lst;
    write lk
      { nextId = data.nextId,
        lst
      },

  /// Removes a nick.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  ///   nickId - Identifier of nick to add.
  delNick lk nickId
  is sync.t -> number -> () =
    update codes =
      filter do e: e.nickId != nickId done codes;
    //---
    data = read' lk;
    var lst = [];
    for data.lst do sv:
      lst := (sv with { codes = update sv.codes }) :: lst
      done;
    write lk
      { nextId = data.nextId,
        lst
      },

  /// Modifies code of a company (nick).
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  ///   serverId - Identifier of server to modify.
  ///   nickId - Identifier of nick to modify.
  ///   code - Server code for company.
  modifyNickCode lk serverId nickId code
  is sync.t -> number -> number -> string -> () =
    data = read' lk;
    lst = map do sv:
      if sv.id == serverId then
        codes = map do c:
          if c.nickId == nickId then
            c with { code = Some code }
          else
            c
          fi
          done sv.codes;
        sv with { codes }
      else
        sv
      fi
      done data.lst;
    write lk
      { nextId = data.nextId,
        lst
      },

  /// Returns true if the server "serverId" has defined its 'dailyConf'.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  ///   serverId - Server identifier to test.
  definedDailyConf? lk serverId
  is sync.t -> number -> boolean =
    case find do sv: sv.id == serverId done (read lk) of
    sv::_ : not (none? sv.dailyConf);
    _ : false
    esac,

  /// Returns true if the server "serverId" has defined its 'historicConf'.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  ///   serverId - Server identifier to test.
  definedHistoricConf? lk serverId
  is sync.t -> number -> boolean =
    case find do sv: sv.id == serverId done (read lk) of
    sv::_ : not (none? sv.historicConf);
    _ : false
    esac,

  /// Returns the list of server which have activated daily configuration.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  dailyList lk
  is sync.t -> { servers is array<server.t>, selected is number } =
    confList lk false,

  /// Returns the list of server which have activated historic configuration and
  /// the index of the preferred server.
  ///
  /// Arguments:
  ///   lk - Synchronization lock.
  historicList lk
  is sync.t -> { servers is array<server.t>, selected is number } =
    confList lk true,

})
