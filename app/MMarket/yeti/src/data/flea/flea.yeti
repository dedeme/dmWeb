// Copyright 22-May-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Flea data
module data.flea.flea;

load es.dm.std;
rnd = load es.dm.rnd;
dec = load es.dm.dec;
json = load es.dm.json;
date = load es.dm.date;
load es.dm.jsonM;
cts = load data.cts;
fmodel = load data.flea.fmodel;

typedef t =
  { date is string,
    cycle is number,
    id is number,
    params is array<number>
    //decs is array<number>
  };

{
  /// Random constructor.
  ///
  /// Arguments:
  ///   date - Date of creation.
  ///   md - Model
  ///   cycle - Cycle of creation
  ///   id - Identifier inside of date-cycle.
  ///   decs
  ///
  /// Notes:
  /// For each min and max a parameter is calculated
  mk md date cycle id //decs
  is fmodel.t -> string -> number -> number -> t =
    params = map2 do mn mx:
      rnd.d' mn mx
      done md.parMins md.parMaxs;
    params = map2 do decimals v:
      dec.fix decimals v
      done md.parDecs params |> array;
    { date, cycle, id, params },

  /// Returns a flea JSONized.
  ///
  /// Arguments:
  ///   f - Flea
  toJs f
  is t -> json.t =
    json.wa
      [ json.ws f.date,
        json.wn f.cycle,
        json.wn f.id,
        jswList json.wn (list f.params)
      ],

  /// Returns a flea from a JSON value.
  ///
  ///  Arguments:
  ///    js - JSON value
  fromJs js
  is json.t -> t =
    a = json.ra js |> array;
    { date = json.rs a[0],
      cycle = json.rn a[1],
      id = json.rn a[2],
      params = jsrList json.rn a[3] |> array
    },

  /// Returns date-cycle-id
  ///
  /// Arguments
  ///   f - Flea
  name f
  is t -> string =
    "\(f.date)-\(f.cycle)-\(f.id)",

  /// Two fleas are equals if they have equals 'params'.
  ///
  /// Arguments:
  ///   f1 - Flea
  ///   f2 - Flea
  ///
  /// Notes:
  ///   "f1" and "f2" must have the same number of parameters.
  eq f1 f2
  is t -> t -> boolean =
    map2 do p1 p2:
      df = p1 - p2;
      if df > 0.0000001 or df < (-0.0000001) then false else true fi
      done f1.params f2.params |> all id,

  /// Evaluate a flea.
  ///
  /// Arguments:
  ///   f - Flea
  ///   assets - Ratio of assets (totalAssets / InitalCapital)
  ///   profitsAvg - Ratio of profits average.
  ///   profitsVa - Ratio of profits variance.
  evaluate f assets profitsAvg profitsVa
  is t -> number -> number -> number -> number =
    age = date.dfDays (date.now ()) (date.fromStr f.date |> optGet);
    ageRatio = if age >= cts.historicQuotes then 1
               else age / cts.historicQuotes fi;
    assets * cts.assetsRatio +
      profitsAvg * cts.profitsAvgRatio +
      (1 - profitsVa) * cts.profitsVaRatio +
      ageRatio * cts.ageRatio,

  /// Returns a new muted flea.
  ///
  /// Arguments:
  ///   md - Model
  ///   f - Flea
  ///   date - Date of creation.
  ///   cycle - Cycle of creation
  ///   id - Identifier inside of date-cycle.
  mutate md f date cycle id
  is fmodel.t -> t -> string -> number -> number -> t =
    r = (list f.params) |> array;
    for [0..length r - 1] do i:
      p = f.params[i];
      mul = cts.mutationMultiplier * (rnd.d () * 2  - 1);
      df = if mul > 0 then md.parMaxs[i] - p else p - md.parMins[i] fi;
      r[i] := dec.fix md.parDecs[i] (p + mul * df)
      done;
    { date, cycle, id, params = r },
}