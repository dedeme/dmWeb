// Copyright 21-Apr-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Log entry.
module data.logRow;

buf = load es.dm.buf;
date = load es.dm.date;
json = load es.dm.json;

typedef t =
  { /// 'true' of the entry is an error message.
    error? is boolean,
    /// Time in format "dd/mm/yyyy(hh:mm:ss)".
    time is string,
    /// Message to show.
    msg is string
  };

(
  now () =
    date.format "%d/%m/%Y(%H:%M:%S)" (date.now ());

{
  /// Returns formated exception with stack trace.
  ///
  /// Arguments
  ///   e - java.lang.Throwable
  format e
  is ~java.lang.Throwable -> string =
    ( r = buf.mk ();
      buf.add r (string e#getMessage());
      for (take 10 e#getStackTrace()) do e:
        buf.add r "\n  \(string e#toString())";
        done;
      buf.toStr r
    ),

  /// Creates an informative message.
  ///
  /// Arguments:
  ///   msg - Message to show.
  info msg
  is string -> t =
    { error? = false,
      time = now (),
      msg
    },

  /// Creates an error message.
  ///
  /// Arguments:
  ///   e - Throwable to show.
  error e
  is ~java.lang.Throwable -> t =
    { error? = true,
      time = now (),
      msg = format e
    },

  /// Serializes to JSON.
  ///
  /// Arguments:
  ///   r - Row to serialize.
  toJs r
  is t -> json.t =
    json.wa
      [ json.wb r.error?,
        json.ws r.time,
        json.ws r.msg
      ],

})
