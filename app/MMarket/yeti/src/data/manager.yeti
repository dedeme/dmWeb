// Copyright 03-Jun-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Management of investor-companies.
module data.manager;

json = load es.dm.json;
load es.dm.jsonM;
fmodel = load data.flea.fmodel;
fmodels = load data.flea.fmodels;

typedef entryT =
  { model is fmodel.t,
    params is array<number>
  }

typedef t =
  { var base is entryT,
    nicks is hash<string, entryT>
  };

{
  /// Creates a default manager entry.
  entryMk ()
  is () -> entryT =
    model = head (fmodels.list ());
    params = map2 do p1 p2 : (p1 + p2) / 2 done model.parMaxs model.parMins;
    { model, params = array params },

  /// Two entry are equals if they have equals 'model' and 'params'.
  ///
  /// Arguments:
  ///   f1 - Flea
  ///   f2 - Flea
  entryEq mp1 mp2
  is entryT -> entryT -> boolean =
    mp1.model.id == mp2.model.id and
    ( map2 do p1 p2:
        df = p1 - p2;
        if df > 0.000001 or df < (-0.000001) then false else true fi
        done mp1.params mp2.params |> all id
    ),

  /// Returns an entry JSONized to save in file system.
  ///
  /// Arguments:
  ///   e - Entry.
  entryToJs e
  is entryT -> json.t =
    json.wa
      [ json.ws e.model.id,
        jswList json.wn (list e.params)
      ],

  /// Returns an entry JSONized for sending to client (javascript).
  ///
  /// Arguments:
  ///   e - entry.
  entryToJsClient e
  is entryT -> json.t =
    json.wa
      [ fmodel.toJs e.model,
        jswList json.wn (list e.params)
      ],

  /// Returns an entry from a JSON value generated with 'entryTojs'. If model
  /// is not found, a default entry is returned.
  ///
  ///  Arguments:
  ///    js -  JSON value.
  entryFromJs js
  is json.t -> entryT =
    a = json.ra js |> array;
    case fmodels.getModel (json.rs a[0]) of
    Some model :
      { model, params = jsrList json.rn a[1] |> array };
    None () :
      entryMk ()
    esac,

  /// Creates a default manager.
  mk ()
  is () -> t =
    { var base = entryMk (), nicks = [:] },

  /// Returns the model and parameters of a nick.
  ///
  /// Arguments:
  ///   manager - Manager.
  ///   nick - Nick to search.
  getModel manager nick
  is t -> string -> entryT =
    if nick in manager.nicks then manager.nicks[nick]
    else manager.base fi,

  /// Returns a manager JSONized to save in file system.
  ///
  /// Arguments:
  ///   m - Manager.
  toJs m
  is t -> json.t =
    json.wa
      [ entryToJs m.base,
        jswHash entryToJs m.nicks
      ],

  /// Returns a manager JSONized for sending to client (javascript).
  ///
  /// Arguments:
  ///   m - Manager.
  toJsClient m
  is t -> json.t =
    json.wa
      [ entryToJsClient m.base,
        jswHash entryToJsClient m.nicks
      ],

  /// Returns a manager from a JSON value generated with 'tojs'.
  ///
  ///  Arguments:
  ///    js -  JSON value.
  fromJs js
  is json.t -> t =
    a = json.ra js |> array;
    { var base = entryFromJs a[0],
      nicks = jsrHash entryFromJs a[1]
    },

}