// Copyright 20-Apr-2020 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Nick data.
module data.nick;

json = load es.dm.json;

typedef t =
  { /// Identifier.
    id is number,
    /// Name (TEF, ACS...).
    name is string,
    /// If is selected to operate.
    sel? is boolean
  };

typedef qvalueT =
  { /// Nick id.
    nick is number,
    /// A quote value: open, close, max, min, vol.
    value is number
  }
{
  /// Creates a new nick no selectioned.
  ///
  /// Arguments:
  ///   id - Identifier.
  ///   name - Name (TEF, ACS...)
  mk id name
  is number -> string -> t =
    { id, name, sel? = false},

  /// To JSON.
  ///
  /// Arguments:
  ///   nick - Nick to serialize.
  toJs nick
  is t -> json.t =
    json.wa
      [ json.wn nick.id,
        json.ws nick.name,
        json.wb nick.sel?
      ],

  /// From JSON.
  ///
  /// Arguments:
  ///   js - JSON value to deserialize.
  fromJs js
  is json.t -> t =
    a = array (json.ra js);
    { id = json.rn a[0],
      name = json.rs a[1],
      sel? = json.rb a[2]
    },

  /// Creates a tuple of nick-quoteValue (e.g nick-close: (23, 12.0435))
  ///
  /// Arguments:
  ///   nick - Nick id.
  ///   value - A quote value: open, close, max, min, vol.
  mkQvalue nick value
  is number -> number -> qvalueT =
    { nick, value },

  /// to JSON
  ///
  /// Arguments:
  ///   value - NickId-Value to serialize.
  qvalueToJs value
  is qvalueT -> json.t =
    json.wa
      [ json.wn value.nick,
        json.wn value.value
      ],

  /// From JSON.
  ///
  /// Arguments:
  ///   js - JSON NickId-Value to deserialize.
  qvalueFromJs js
  is json.t -> qvalueT =
    a = array (json.ra js);
    { nick = json.rn a[0],
      value = json.rn a[1]
    },
}