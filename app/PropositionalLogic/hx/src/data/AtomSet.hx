// Copyright 03-Aug-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

package data;

/// Atomic identifer set.
class AtomSet {
  /// Number of sets of names for atomic propositions.
  public static final number = 3;

  /// Returns the index of the selected set of names for atomic propositions.
  public static function currentSet (): Int {
    switch (dm.Store.get(Cts.atomSetIx)) {
      case Some(v): return Std.parseInt(v);
      case None: return 0;
    }
  }

  /// Returns a function to generate names for atomic propositions.
  /// When the names are exhausted, returns "".
  public static function generator (): () -> String {
    final ns = "0123456789";
    var current = "";
    return () -> {
      if (current == "r9") return "";
      current = switch (current) {
        case "": "p";
        case "p": "q";
        case "q": "r";
        case "r": "p0";
        case "p9": "q0";
        case "q9": "r0";
        default:
          switch (current.charAt(0)) {
            case "p": "p" + ns.charAt(ns.indexOf(current.charAt(1)) + 1);
            case "q": "q" + ns.charAt(ns.indexOf(current.charAt(1)) + 1);
            default: "r" + ns.charAt(ns.indexOf(current.charAt(1)) + 1);
          }
      }
      return current;
    }
  }

  /// Returns the representation of basic names of atomic proposition.
  ///   set: Set index (0, 1 or 2)
  ///   name: Name of atomic proposition (one of those generated by 'generator').
  public static function toString2(set: Int, name: String): String {
    switch (set) {
      case 0: return name;
      case 1: {
        if (name.length == 1){
          return switch (name) {
            case "p": "A";
            case "q": "B";
            default: "C";
          }
        }
        return switch (name.charAt(0)) {
          case "p": "A" + name.charAt(1);
          case "q": "B" + name.charAt(1);
          default: "C" + name.charAt(1);
        }
      }
      default: {
        if (name.length == 1){
          return switch (name) {
            case "p": "<i>&phi;</i>";
            case "q": "<i>&chi;</i>";
            default: "<i>&psi;</i>";
          }
        }
        return switch (name.charAt(0)) {
          case "p": "<i>&phi;</i>" + name.charAt(1);
          case "q": "<i>&chi;</i>" + name.charAt(1);
          default: "<i>&psi;</i>" + name.charAt(1);
        }
      }
    }
  }

  /// Equals to 'toString(currentSet(), name)'
  public static function toString(name: String): String {
    return toString2(currentSet(), name);
  }

  /// Returns a sample of a set.
  ///   set: Set index (0, 1 or 2)
  public static function sample(set: Int): Array<String> {
    return ["p", "q", "r"].map(e -> toString2(set, e));
  }
}
